langS_En = {
	cdr: {
		column: {
			ID: 'ID',
			ID_sensor: 'ID<br><span style="font-size: 80%;">sensor id</span>',
			ID_sensor_name: 'ID<br><span style="font-size: 80%;">sensor id</span>',
			calldate2: 'Datetime',
			calldate2e: 'Datetime<br>call end',
			duration2: 'Duration<br><span style="font-size: 9">(PDD)</span><br>Billed time<br>codec',
			duration2s: 'Duration<br>codec',
			caller2: 'Caller num/name<br>SIP source IP<br>SIP agent',
			called2: 'Called num<br>SIP destination IP<br>SIP agent',
			proxy: 'Proxy',
			lastresponse: 'Last response',
			callerrtp2: 'Caller src RTP MOS<br>delay distribution<br>loss distribution',
			calledrtp2: 'Called src RTP MOS<br>delay distribution<br>loss distribution',
			callerrtp2_without_rtp: 'Caller src IP',
			calledrtp2_without_rtp: 'Called dst IP',
			price: 'Price',
			price_customer_shortcut: 'C',
			price_operator_shortcut: 'O',
			menu: 'Commands',
			sipcallerip2: 'Source IP',
			sipcalledip2: 'Destination IP',
			srcSimple: 'Call from',
			dstSimple: 'Call to',
			durationSimple: 'Duration',
			time_s: 'time [s]',
			srcip: 'Source IP',
			dstip: 'Destination IP',
			direction: 'direction',
			sipMsg: 'SIP message',
			groupSipUser: 'User',
			groupSipIP_hostName: 'sip IP / host name',
			groupRtpIP_hostName: 'rtp IP / host name',
			groupPhoneNumb: 'phone number',
			groupCodec: 'Codec',
			groupLastSIPresponse: 'SIP Response',
			groupReasonSip: 'Reason SIP',
			groupReasonQ850: 'Reason Q850',
			groupIP_group: 'IP Group',
			groupUa: 'user agent',
			groupCountry: 'country',
			cnt_all: 'total CDR',
			cnt_ok: '%',
			sum_duration_min: '∑ minutes',
			acd_all: 'ACD',
			asr_all: 'ASR',
			ner_all: 'NER',
			mos_all: 'MOS',
			mos_perc95_all: 'MOS %95',
			mos_perc99_all: 'MOS %99',
			mos_xr_avg_all: 'XR avg',
			mos_xr_avg_perc95_all: 'XR avg %95',
			mos_xr_avg_perc99_all: 'XR avg %99',
			mos_xr_avg_caller_all: 'XR avg A',
			mos_xr_avg_caller_perc95_all: 'XR avg A %95',
			mos_xr_avg_caller_perc99_all: 'XR avg A %99',
			mos_xr_avg_called_all: 'XR avg B',
			mos_xr_avg_called_perc95_all: 'XR avg B %95',
			mos_xr_avg_called_perc99_all: 'XR avg B %99',
			mos_xr_min_all: 'XR min',
			mos_xr_min_perc95_all: 'XR min %95',
			mos_xr_min_perc99_all: 'XR min %99',
			mos_xr_min_caller_all: 'XR min A',
			mos_xr_min_caller_perc95_all: 'XR min A %95',
			mos_xr_min_caller_perc99_all: 'XR min A %99',
			mos_xr_min_called_all: 'XR min B',
			mos_xr_min_called_perc95_all: 'XR min B %95',
			mos_xr_min_called_perc99_all: 'XR min B %99',
			mos_silence_avg_all: 'Silence avg',
			mos_silence_avg_perc95_all: 'Silence avg %95',
			mos_silence_avg_perc99_all: 'Silence avg %99',
			mos_silence_avg_caller_all: 'Silence avg A',
			mos_silence_avg_caller_perc95_all: 'Silence avg A %95',
			mos_silence_avg_caller_perc99_all: 'Silence avg A %99',
			mos_silence_avg_called_all: 'Silence avg B',
			mos_silence_avg_called_perc95_all: 'Silence avg B %95',
			mos_silence_avg_called_perc99_all: 'Silence avg B %99',
			mos_silence_min_all: 'Silence min',
			mos_silence_min_perc95_all: 'Silence min %95',
			mos_silence_min_perc99_all: 'Silence min %99',
			mos_silence_min_caller_all: 'Silence min A',
			mos_silence_min_caller_perc95_all: 'Silence min A %95',
			mos_silence_min_caller_perc99_all: 'Silence min A %99',
			mos_silence_min_called_all: 'Silence min B',
			mos_silence_min_called_perc95_all: 'Silence min B %95',
			mos_silence_min_called_perc99_all: 'Silence min B %99',
			mos_lqo_caller_all: 'LQO A',
			mos_lqo_caller_perc95_all: 'LQO A %95',
			mos_lqo_caller_perc99_all: 'LQO A %99',
			mos_lqo_called_all: 'LQO B',
			mos_lqo_called_perc95_all: 'LQO B %95',
			mos_lqo_called_perc99_all: 'LQO B %99',
			packets_lost_all: 'PL',
			packets_lost_perc95_all: 'PL %95',
			packets_lost_perc99_all: 'PL %99',
			jitter_all: 'J',
			jitter_perc95_all: 'J %95',
			jitter_perc99_all: 'J %99',
			delay_all: 'D',
			delay_perc95_all: 'D %95',
			delay_perc99_all: 'D %99',
			delay_all_avg: 'x&#772; PDV',
			delay_perc95_all_avg: 'x&#772; PDV %95',
			delay_perc99_all_avg: 'x&#772; PDV %99',
			silence_all: 'S',
			silence_perc95_all: 'S %95',
			silence_perc99_all: 'S %99',
			silence_end_all: 'LS',
			silence_end_perc95_all: 'LS %95',
			silence_end_perc99_all: 'LS %99',
			clipping_all: 'CF',
			clipping_perc95_all: 'CF %95',
			clipping_perc99_all: 'CF %99',
			short_60: 'dur < 60s',
			short_20: 'dur < 20s',
			price_customer: 'price C',
			price_operator: 'price O',
			price_difference: 'price D',
			fbasename: 'Call ID',
			firsttime: 'Start',
			codec: 'Codec',
			received: 'Packets',
			saddr: 'Source IP',
			daddr: 'Dest. IP',
			sport: 'Source Port',
			dport: 'Dest. Port',
			ssrc: 'SSRC',
			loss: 'Loss',
			maxjitter_mult10: 'Jitter',
			name: 'name',
			note: 'Note',
			created_at: 'Datetime',
			created_name: 'User'
		},
		field: {
			shareCdr_mailSubject: 'Share CDR',
			shareCdr_mailMessage: 'Share CDR links:\n\n',
			shareCdr_mailSignature: '\n---\n',
			interval: 'interval',
			filter: 'filter',
			direction: 'direction',
			searchInterval_s: 'search interval [s]',
			relatedInterval_s: 'related interval [s]',
			groupBy: 'group by',
			mosLt: 'MOS <',
			packetsLossGtPerc: 'Packets Loss [%] >',
			jitterGt: 'Jitter >',
			delayCountGt: 'PDV, count >',
			template: 'Template',
			templateName: 'Template name',
			privateTemplate: 'Private',
			selectionName: 'Selection name',
			privateSelection: 'Private',
			showForUsers: 'Restrict for users',
			showForGroups: 'Show for groups',
			dateRange: 'Date range',
			from: 'From',
			to: 'To',
			lastDays: 'Last days',
			lastDaysMinutes: 'Last days, minutes',
			currentSelection: 'Current selection',
			namedSelection: 'Named selection',
			reasonForAuditLog: 'reason<br>(for audit log)',
			note: 'Note',
			file: 'Attachment'
		},
		sortBy: {
			calldate: 'call start time',
			callend: 'call end time',
			duration: 'duration',
			pdd: 'PDD',
			codec_payload: 'codec (payload)',
			callerNumber: 'caller number',
			sipSourceIP: 'SIP source IP',
			calledNumber: 'called number',
			sipDestinationIP: 'SIP destination IP',
			lastresponse: 'last response',
			sip_reason: 'SIP reason',
			q850_reason: 'Q.850 reason',
			priceCustomer: 'price customer',
			priceOperator: 'price operator'
		},
		field_filter: {
			dateRange:		'Date range',
			dateRangeHelp:		'Select date from which you want to see CDR or select date till you want to see CDR or select both dates.',
			dateFrom:		'From',
			dateTo:			'To',
			dateFromHelp:		'From',
			dateToHelp:		'To',
			lastDaysMinutes:	'Last days, minutes',
			lastDaysMinutesHelp:	'',
			currentSelection:	'Current selection',
			currentSelectionHelp:	'',
			namedSelection:		'Named selection',
			namedSelectionHelp:	'',
			num:			'Number',
			num_start:		'Numb.start', 
			num_end:		'Numb.end', 
			num_contain:		'Numb.contain',
			num_regexp:		'Numb.regexp',
			numTriggerHelp:		'Select search type',
			countryCodeByNumber:	'&nbsp;&nbsp;&nbsp;&nbsp;country',
			countryCodeByNumberCallerCalledCmp:
						'&nbsp;&nbsp;&nbsp;&nbsp;compare caller / called country',
			callerName:		'Caller name',
			domain:			'Domain',
			IP:			'IP address',
			countryCodeByIP:	'&nbsp;&nbsp;&nbsp;&nbsp;country',
			countryCodeByIPCallerCalledCmp:
						'&nbsp;&nbsp;&nbsp;&nbsp;compare caller / called country',
			Port:			'Port',
			ident:			'Basic criteria',
			identHelp:		'Search CDR by caller or called number. You can search for calls starting with prefix like this "001%" or ending with suffix "%123".',
			caller:			'Caller',
			called:			'Called',
			callerOrCalled:		'Caller or Called',
			callerGroup:		'Caller group',
			calledGroup:		'Called group',
			callerOrCalledGroup:	'Caller or Called group',
			source:			'Source',
			dest:			'Destination',
			sourceOrDest:		'Source or Dest.',
			IP:			'IP address',
			proxyIp:		'Proxy',
			IPHelp:			'Search CDR by SIP IP address. You can use single IP or IP/mask. For example you can select all calls from 192.168.0.0/16 subnet or just single IP address 192.168.0.10',
			codec:			'Codec',
			codecHelp:		'',
			exclude_codec:		'Exclude codec',
			exclude_codecHelp:	'',
			callDuration:		'Call duration [s]',
			callDurationHelp:	'Total length of call in seconds. You can search interval > 10 & < 100 seconds for example.',
			connectDuration:	'Connect duration [s]',
			connectDurationHelp:	'Total length of answered call. You can search interval > 10 & < 100 seconds for example.',
			PDD_:			'PDD [s]',
			PDD_Help:		'',
			ringingTime:		'Ringing time [s]',
			ringingTime_Help:	'',
			operLt:			' < ',
			operGt:			' >= ',
			lastSIPResponse:	'Last SIP response code',
			lastSIPResponseHelp:	'Search CDR by last SIP response number code or text response number code. Searching for numeric response code examples:<br>' +
						'&nbsp;&bull; "4" - will search for all 4XX response codes,<br>' +
						'&nbsp;&bull; "44" - will search for all 44X response codes,<br>' +
						'&nbsp;&bull; "487 Block%" - will search by text response code which starts with string "487 Block",<br>' +
						'&nbsp;&bull; "4,!487" - will search for all 4XX response codes except 487,<br>' +
						'&nbsp;&bull; "4,!487 Request %" - will search for all 4XX response codes except those with starting string "487 Request",<br>' +
						'&nbsp;&bull; "4 or 5" will search for all 4XX or 5XX response codes,<br>' +
						'&nbsp;&bull; "4 or 5" will search for all 4XX or 5XX response codes.',
			allSIPRequests:		'SIP requests',
			allSIPRequestsHelp:	'',
			allSIPResponse:		'SIP response code',
			allSIPResponseHelp:	'Search for all SIP response codes. You can make logical OR use negation and substitution like % Example: 491,481,3%,%OK% will search all calls with 491 OR 481 or all 3XX or all text responses with OK in text.',
			reasonSip:		'Reason SIP',
			reasonSipHelp:		'Search in Reason: header SIP type protocol',
			reasonQ850:		'Reason Q.850',
			reasonQ850Help:		'Search in Reason: header Q.850 type protocol',
			reasonSipQ850:		'Reason SIP & Q.850',
			trunk:			'Direction (by trunk)',
			trunkHelp:		'Search CDR by IN/OUT or INTERNAL which is determined by Groups -> IP groups trunk checkbox (you have to define trunks in IP groups and check Trunk checkbox there).',
			whoHangup:		'Who hangup',
			whoHangupHelp:		'Search calls where caller or called sent BYE',
			unconfirmedBye:		'Unconfirmed BYE',
			unconfirmedByeHelp:	'',
			byeCode:		'Timeout calls',
			byeCodeHelp:		'Type of terminated calls by the sniffer',
			byeCorrect:		'Interrupted call',
			byeCorrectHelp:		'Search calls where BYE SIP message is missing which can indicates interrupted call',
			oneWay:			'One way',
			oneWayHelp:		'',
			missingRtp:		'Missing RTP',
			missingRtpHelp:		'',
			missingSrtpKey:		'Missing SRTP Key',
			missingSrtpKeyHelp:	'',
			detectFAS:		'FAS',
			detectFAShelp:		'False Answer Supervision',
			detectZeroSSRC:		'Zero SSRC',
			detectZeroSSRChelp:	'Zero Synchronization source identifier',
			detectSIPALG:		'SIP-ALG',
			detectSIPALGhelp:	'Detected SIP-ALG',
			sdpMediaType:		'SDP media type',
			sdpMediaTypeHelp:	'',
			sdpMediaType_multipleSelectOperator:		
						'multiple select operator',
			sdpMediaType_multipleSelectOperatorHelp:
						'',
			rtpState:		'RTP streams',
			rtpStateHelp:		'',
			changeSrcRtpPort:	'Change source RTP port',
			changeSrcRtpPortHelp:	'',
			televentRequestResponse:'Telephone event request / response',
			televentRequestResponseHelp:
						'',
			sipAgent:		'SIP agent',
			sipAgentHelp:		'',
			uaCaller:		'Caller',
			uaCalled:		'Called',
			uaCallerOrCalled:	'Caller or Called',
			saddr:			'RTP source IP',
			saddrHelp:		'',
			a_saddr:		'Caller',
			b_saddr:		'Called',
			ab_saddr:		'Caller or Called',
			callID:			'Call ID',
			callIDHelp:		'',
			note:			'Note',
			noteHelp:		'',
			maxRetransmissionInvite:'max. retransmission invite',
			maxRetransmissionInviteHelp:
						'',
			ipFragmented:		'IP fragmented',
			ipFragmentedHelp:	'',
			custhead_group:		'Custom header group',
			sensor:			'Sensor',
			sensorHelp:		'',
			alertSent:		'Alert history',
			alertSentHelp:		'',
			reportSent:		'Report history',
			reportSenthelp:		'',
			MOS:			'MOS <=',
			MOSHelp:		'Search CDR by Meaning Opinion Score. 4.5 is top quality, 1 is the worst. Fixed 50 MOS represents quality for devices with minimal or no jitterbuffer. Fixed 200 represents MOS for devices with fixed 200 ms jitterbufff. Adaptive 500 represents MOS for devices with adaptive jitter buffer up to 500 ms.',
			MOS_LQO:		'MOS LQO',
			MOS_LQO_Help:		'Search CDR by MOS LQO. 4.5 is top quality, 1 is the worst.',
			delay:			'PDV',
			delayHelp:		'Search by number of delayd packets. If you search 10 in "> 70" field it will find calls where 10 packets were delayd at least 70ms.',
			delay_strict:		'strict',
			delay_strictHelp:	'ON is searching for exact match, all conditions must be satisfied in all PDF fields. e.g. value 2 in field >50 and value 7 in field >90 and value 10 in field >300 mean that the call must hit two or more of >50ms delayed packets AND seven or more of >90ms delayed packets AND ten or more of >300ms delayed packets. OFF is searching for any delayed packets greater then the summed value. e.g. you must hit ten or more of >300ms delayed packets OR hit seven or more of >300ms delayed packets + >90ms delayed packets OR hit two or more of >300ms delayed packets + >90ms delayed packets + >50ms delayed packets',
			delaySum:		'PDV sum',
			delaySumHelp:		'Summary of delayed packets.',
			delayAvg:		'PDV avg',
			delayAvgHelp:		'Average of delayed packets.',
			jitterMax:		'Jitter max',
			jitterMaxHelp:		'Maximal jitter.',
			jitterAvg:		'Jitter avg',
			jitterAvgHelp:		'Average jitter.',
			loss:			'Loss',
			lossHelp:		'Search by number of loss packets. Fields 1-10 represents number of packets which were lost in a row. For example if you put in field 5 number 1 it will find all calls with at least 5 packet loss in a row.',
			loss_strict:		'strict',
			loss_strictHelp:	'ON is searching for exact match, all conditions must be satisfied in all loss fields. e.g. value 2 in field 1 and value 7 in field 5 and value 10 in field 9 mean that the call must hit one lost packet in a row twice or more AND five lost packets in a row seventimes or more AND nine lost packets in a row tentimes or more. OFF is searching for any loss greater then the summed value. e.g. you must hit one lost packet in a row twice or more OR hit 5* five lost packets in a row + one lost packet in a row >= 7 OR hit 9* nine lost packets in a row + 5* five lost packets in a row + one lost packet in a row >= 10.',
			RTPport:		'RTP port',
			RTPip_port:		'RTP IP/Net, port',
			SDPip_port:		'SDP IP/Net, port',
			RTPstreamUsedInAnotherCall:
						'RTP stream used in another call',
			RTCPj: 			'RTCP Jitter',
			RTCPjHelp: 		'RTCP jitter',
			RTCPjMax: 		'max >=',
			RTCPjAvg: 		'average >=',
			RTCPl: 			'RTCP % loss',
			RTCPlHelp: 		'RTCP % loss',
			RTCPlMax: 		'max >=',
			RTCPlAvg: 		'average >=',
			RTCPrtd:		'RTCP rtd (latency)',
			RTCPrtdHelp:		'Max RTCP Roundtrip delay aka latency [ms]',
			RTCPrtdMax:		'max >=',
			RTCPrtdAvg:		'average >=',
			a_lastRtpFromEnd:	'Last RTP from last SIP (Caller)',
			a_lastRtpFromEndHelp:	'Seconds between last RTP and last SIP packet.',
			b_lastRtpFromEnd:	'Last RTP from last SIP (Called)',
			b_lastRtpFromEndHelp:	'Seconds between last RTP and last SIP packet.',
			sipcallerdip_with_proxy:'include proxy',
			sipcallerdip_with_proxyHelp:
						'Include searching in rtp_proxy table - warning - due to extra MySQL SUBSELECT searching will slow down filtering.',
			frLostPkts:		'RTCP Fraction Lost Pkts',
			frLostPktsHelp:		'Number of packets with non-zero fraction lost.',
			mosMin:			'MOS(min) from avgs',
			mosMinHelp:		'',
			mosF1Min:		'MOS f1 (min)',
			mosF1MinHelp:		'MOS f1 50ms jitterbuffer (min)',
			mosF2Min:		'MOS f2 (min)',
			mosF2MinHelp:		'MOS f2 200ms jitterbuffer (min)',
			mosAdaptMin:		'MOS Adapt (min)',
			mosAdaptMinHelp:	'MOS Adapt up to 500ms jitterbuffer (min)',
			mosXrAvg:		'MOS XR (avg)',
			mosXrAvgHelp:		'',
			mosXrMin:		'MOS XR (min)',
			mosXrMinHelp:		'',
			mosSilenceAvg:		'MOS Silence (avg)',
			mosSilenceAvgHelp:	'',
			mosSilenceMin:		'MOS Silence (min)',
			mosSilenceMinHelp:	'',
			packetLossPerc:		'Packet loss [%]',
			packetLossPercHelp:	'',
			silence:		'Silence [%]',
			silenceHelp:            'Search for calls where there was specified % of silence audio frames. The silence detection must be enabled in the sniffer configuration silencedetect = yes',
			silenceEnd:		'Last Silence [s]',
			silenceEndHelp:         'Search for calls where there was silence at the end of calls for specified seconds. This is usefull when you want to search calls where audio was cut (silence) - the silence is meant by silence in audio and not missing RTP frames. This feature must be enabled in the sniffer also.',
			clipping:		'Clipped Frames',
			clippingHelp:           'Number of clipped audio frames (usually one RTP packet is 20ms audio). This can happen when one side speeks too loud for example or on broken devices / transcoders etc. This feature must be enabled in the sniffer also.',
			rtp_streams_ge:		'RTP streams >=',
			rtp_streams_geHelp:	'',
			rtp_stream_packets_ge:	'Max packets in RTP stream >=',
			rtp_stream_packets_geHelp:
						'',
			rtp_stream_packets_le:	'Min packets in RTP stream <=',
			rtp_stream_packets_leHelp:
						'',
			dscp_caller_sip:	'Caller SIP',
			dscp_caller_sipHelp:	'',
			dscp_called_sip:	'Called SIP',
			dscp_called_sipHelp:	'',
			dscp_caller_rtp:	'Caller RTP',
			dscp_caller_rtpHelp:	'',
			dscp_called_rtp:	'Called RTP',
			dscp_called_rtpHelp:	'',
			ip_port_label:		'IP, port',
			ip_net_port_label:	'IP/Net, port',
			ip_port_title_new:	'new IP, port',
			ip_port_title_edit:	'edit IP, port',
			ip_net_port_title_new:	'new IP/Net, port',
			ip_net_port_title_edit:	'edit IP/Net, port',
			eq:			'eq (==)',
			not_eq:			'not eq (<>)',
			chart_filter:		'chart filter',
			chart_filterHelp:	'For filtering according to a special field used for chart.'
		},
		field_filter_help: {
			callerd: 'Searching for all numbers starting with 1: 1%, searching for numbers 100 - 199 (exact 3 digits starting with 1): 1__, Searching for all numbers which ends 123: %123, searching for number 123 or number 456: 123 456, [123 456] will search for exact number with space, searching for all numbers starting with 1 except number 112: 1% !112, searching for numbers starting with 1 or 2 except 112 and 212: 1 2 !112 !212., searching for regexp 12[34].*: R(12[34].*)',
			callerd_domain: null,
			sipcallerdip: 'Searching for more ip addresses (OR): 192.168.0.1 10.0.0.0/16, searching for subnet except one IP: 10.0.0.0/16 !10.0.0.1, searching for more subnets except another subnet: 10.0.0.0/16 192.168.0.0/16 !10.0.20.0/24 !192.168.10.0/24. If not proper IP or Net then DNS resolve is tried.'
		},
		button: {
			quickFilter: 'quick filter',
			filterForm: 'filter form',
			resetFilter: 'reset filter',
			menu: 'Menu',
			charts: 'Charts',
			search: 'Search',
			ok: 'OK',
			close: 'Close',
			undock: 'undock',
			dock: 'dock',
			closeChart: 'close',
			addChart: 'add chart',
			wiresharkFilter: 'wireshark filter',
			typePackets: 'type',
			downloadPCAP: 'download PCAP',
			applyFilterToParentTable: 'apply filter to parrent table',
			filteredCdr: 'filtered cdr',
			showMosXR: 'show MOS XR',
			showMosSilence: 'show MOS Silence',
			showMosLqo: 'show MOS LQO',
			openPieChart: 'open pie chart',
			save: 'save',
			cancel: 'cancel',
			saveTemplate: 'save template',
			editTemplate: 'edit template',
			deleteTemplate: 'delete template',
			refreshInterval: 'refresh interval',
			setttings: '',
			prepareSvgDiagram: 'generate network MAP',
			exportSipHistory: 'SIP export',
			shareShowCdr: 'Share',
			restoreToCurrentSelection: 'restore to current selection',
			selectFile: 'Select File...'
		},
		button_help: {
			quickFilter: 'Select common filters from menu',
			filterForm: 'Show search form',
			viewUrl: 'Show current view & filter URL',
			resetFilter: 'Reset filter to default and reload data',
			charts: 'Open charts panel',
			settings: 'settings',
			advancedStatistics: 'advanced statistics'
		},
		menu: {
			cdrBaseFilters: 'cdr base filters',
			cdrOrder: 'cdr order',
			cdrColumnsFilter: 'cdr columns filter',
			groupFilters: 'group filters',
			groupSelect: 'group select',
			groupCdrErrorData: 'group cdr error data',
			all: 'all',
			'delete': 'delete',
			orderCurrentData: 'Order current data',
			last24hours: 'Last 24 hours',
			last7days: 'Last 7 days',
			last30days: 'Last 30 days',
			lastYear: 'Last year',
			allTime: 'All time',
			allFiltered: 'All filtered',
			selected: 'Selected',
			deleteCDR: 'Delete CDR',
			deleteCDRandFiles: 'Delete CDR and files',
			deleteFiles: 'Delete files',
			exportCSV: 'Export CSV',
			exportCSV_table: 'Table content',
			exportCSV_summary_by_caller: 'Summary by source number',
			exportCSV_summary_by_called: 'Summary by destination number',
			selectionCDR: 'Selection CDR',
			selectionCDR_clear: 'clear current selection',
			selectionCDR_save: 'save to named selection',
			selectionCDR_manage: 'manage saved selections',
			filterByCDR: 'Filter by this CDR',
			bySourceSipIP: 'By source SIP IP',
			bySourceRtpIP: 'By source RTP IP',
			byDstSipIP: 'By destination SIP IP',
			byDstRtpIP: 'By destination RTP IP',
			byCaller: 'By caller number',
			byCalled: 'By called number',
			byLastResponse: 'By SIP response code',
			orderByWorstLoss: 'Order by Loss',
			orderByWorstDelay: 'Order by PDV',
			orderByWorstMOS: 'Order by MOS',
			orderByFixed1: 'Fixed 50 ms',
			orderByFixed2: 'Fixed 200 ms',
			orderByAdaptive: 'Adaptive 500 ms',
			orderByCallDuration:'Order by Call Duration',
			orderBySIP_IP: 'Order by SIP IP',
			orderBySrcSIP_IP: 'Order by source SIP IP',
			orderByDstSIP_IP: 'Order by destination SIP IP',
			orderByNumber: 'Order by Number',
			orderBySrcNumber: 'Order by source Number',
			orderByDstNumber: 'Order by destination Number',
			orderByCallerName: 'Order by Caller Name',
			orderByLastSIPrespNum: 'Order by SIP Response Num',
			orderAsc: 'ascending',
			orderDesc: 'descending',
			filterSimilarCDR: 'Filter similar CDR',
			newIssueTicket: 'New issue ticket',
			revaluationBilling: 'Revaluation Billing',
			shareCdr: 'Share CDR',
			shareSipRtp: 'Share SIP + RTP',
			shareSip: 'Share SIP only',
			shareSipHistory: 'Share SIP history',
			showLink: 'Show link',
			sendLinkViaEmail: 'Send link via e-mail',
			localPublic: 'local public',
			localPrivate: 'local private',
			share_voipmonitor_org: appShareUrl,
			downloadPcap: 'download PCAP',
			downloadSipPcap: 'SIP PCAP',
			downloadSipRtpPcap: 'SIP+RTP PCAP',
			tryDecodeFax: 'try decode fax',
			tryDecodeFaxAsT30: 'decode as T30',
			tryDecodeFaxAsT38: 'decode as T38',
			showRtcpChart: 'show RTCP chart',
			merge: 'Merge',
			mergeSipPcap: 'SIP PCAP',
			mergeSipRtpPcap: 'SIP+RTP PCAP',
			mergeSipHistory: 'SIP HISTORY',
			batchDownloadCdr: 'download from all CDR',
			viewUrl: 'current view & filter URL',
			enableDns: 'Enable DNS IP lookup',
			enableFlags: 'Enable flags',
			number: 'number',
			ip: 'IP',
			left: 'left',
			right: 'right',
			disable: 'disable',
			exportSipHistoryTxtPkt: 'Packets in text form',
			exportSipHistoryDiagramView: 'Diagram',
			rtpStream: 'RTP stream',
			flowChart: 'RTP loss/jitter chart (.graph)',
			rtpStreamAnalysis: 'RTP stream analysis',
			concurrentCallsStats: 'Concurrent calls stats'
		},
		tbar: {
			dateTimeRange: 'date, time range',
			dateTimeFrom: 'date, time from',
			dateTimeTo: 'date, time to',
			menu: 'menu',
			filter: 'filter',
			paginator: 'paginator',
			conditionCallerCalled: 'condition between caller / called'
		},
		title: {
			CDR: 'CDR',
			groups: 'Groups',
			groupBy: 'Group by',
			shareCdr: 'Share CDR',
			shareCdrSendLinkViaEmail: 'Send link via e-mail',
			viewUrl: 'URL for current filter',
			charts: 'Charts',
			searchForm: 'Search form',
			commonTab: 'common',
			RTPtab: 'RTP',
			DSCPtab: 'DSCP',
			filtersCombTab: 'combination',
			summaryTab: 'summary',
			packetDetail: 'Packet detail',
			messagesTab: 'messages',
			diagramTab: 'diagram',
			chartsTab: 'charts',
			sipHistory: 'SIP: history',
			sipHistoryTab: 'SIP: history',
			sipHistory_merge: 'SIP: history (merge)',
			legsByCIDtab: 'Legs by CID',
			legsByHeaderTab: 'Legs by header',
			noteTab: 'note',
			pieChart: 'pie chart',
			groupDefinition: 'group definition',
			cdrFilters: 'cdr filters',
			cdrErrorIf: 'cdr error if',
			saveTemplate: 'save template',
			editTemplate: 'edit template',
			saveSelection: 'save selection',
			msgZeroCdrForTicket: 'Not selected cdr records',
			msgTooMuchCdrForTicket: 'Too much selected cdr records',
			msgTooooMuchCdrForTicket: 'Toooo much selected cdr records',
			msgZeroCdrForMerge: 'Not selected cdr records',
			msgTooMuchCdrForMerge: 'Too much selected cdr records',
			msgDuplicationName: 'duplication name',
			msgDeleteFilter: 'delete filter config',
			bodyTab: 'body',
			bodyInRawTab: 'raw',
			bodyInXmlTab: 'xml',
			httpHeaderTab: 'header',
			rtcpChart: 'RTCP chart',
			rtcpChartTabChart: 'RTCP',
			advancedStatistics: 'Advanced statistics',
			faxContent: 'FAX',
			faxCreateLog: 'log',
			settingChartsTab: 'setting charts',
			networkMapTab: 'network map',
			manageSavedSelections: 'manage saved selections'
		},
		text: {
			msgZeroCdrForTicket: 'Select cdr records before ticket create!',
			msgTooMuchCdrForTicket1: 'You selected',
			msgTooMuchCdrForTicket2: 'cdr records. Continue?',
			msgTooooMuchCdrForTicket1: 'You selected',
			msgTooooMuchCdrForTicket2: 'cdr records. Maximum is 1000.',
			msgZeroCdrForMerge: 'Select cdr records before merge!',
			msgTooMuchCdrForMerge1: 'You selected',
			msgTooMuchCdrForMerge2: 'cdr records. Continue?',
			msgDuplicationName: 'Name is used. Overwrite?',
			msgDeleteFilter: 'delete current template?',
			kernelPacketLoss: 'The sniffer detected packet loss between the linux kernel and sniffer application which means that this CDR can have missing SIP packets or RTP packets and loss statistics is not accurate. The reason of this packet loss is mostly caused by I/O disk overload which blocks processing threads from reading packets from kernel ring buffer.' + '<br>' +
					  'The solution is to increase ringbuffer in sniffer configuration and packetbuffer. If this will not help check the I/O performance and consult manual section &quot;scaling&quot; or contact your support.',
			kernelPacketLoss_short: 'packet loss',
			byeText_2: 'Call has missing confirmation to the BYE request (200 OK - ACK).',
			byeText_102: 'Call was terminated by the sniffer due to absolute_timeout parametr in the sniffer which is by default 4 hours (14400 seconds) or the call was never terminated i.e. lost BYE. If your calls are longer than 4 hours you have to make this value longer.',
			byeText_103: 'Call was forcibly terminated by the BYE 20 minutes timer. This timer is initiated with first BYE message and is 20 minutes long. Cals with this status sent BYE but there were still communication ongoing at least for 20 minutes and call has also no confirmation to the BYE request',
			byeText_104: 'Call was terminated by the sniffer due to RTP timeout - both caller and called RTP streams were cut in the middle of call. The parameter is rtptimeout and is 300 seconds by default.',
			byeText_105: 'Call was terminated by the sniffer because SIP signalization is seen only in one direction and there is no reply to any of SIP request from INVITE initiator within the default sniffer parametr onewaytimeout which is 15 seconds.',
			byeText_101: 'signalization is only in one direction without any replies',
			byeText_106: 'BYE without RES2XX and RES18X',
			byeText_107: 'zombie',
			byeText_108: 'sip without rtp',
			byeText_100: 'The sniffer detected packet loss between the linux kernel and sniffer application which means that this CDR can have missing SIP packets or RTP packets and loss statistics is not accurate. The reason of this packet loss is mostly caused by I/O disk overload which blocks processing threads from reading packets from kernel ring buffer.',
			byeText_110: 'Call was forcibly closed during the closing snifer.',
			byeTextShort_2: 'missing BYE confirmation',
			byeTextShort_102: 'absolute timeout',
			byeTextShort_103: 'BYE timeout',
			byeTextShort_104: 'RTP timeout',
			byeTextShort_105: 'one way timeout',
			byeTextShort_101: 'one way signalization',
			byeTextShort_106: 'early BYE',
			byeTextShort_107: 'zombie',
			byeTextShort_108: 'sip without rtp',
			byeTextShort_100: 'packet loss',
			byeTextShort_110: 'closed during closing snifer',
			rtpStreamUsedInAnotherCall: 'RTP stream used in another call',
			longSIPpacket: 'long SIP packet (greather than 1500B)',
			unconfirmedBye: 'unconfirmed BYE',
			aloneUnconfirmedBye: 'alone unconfirmed BYE',
			unconfirmedBye_help: '',
			aloneUnconfirmedBye_help: '',
			ipFragmentedNo: 'no fragmented',
			ipFragmentedSip: 'in SIP',
			ipFragmentedRtp: 'in RTP',
			ipFragmentedSipOrRtp: 'in SIP or RTP',
			srtpWithoutKey: 'sdp data contains the srtp protocol but does not contain the key; some rtp streams probably will not convert to audio',
			srtpWithoutKey_help: '',
			fasDetected: 'FAS detected',
			fasDetected_short: 'FAS',
			fasDetected_help: '',
			zerossrcDetected: 'zero SSRC detected',
			zerossrcDetected_short: '0SSRC',
			zerossrcDetected_help: '',
			unknowSensorId: 'Sensor ID is not defined in the sensors table. Please add him there.',
			sharingIsNotPermitted: 'sharing is not permitted',
			dataAreNotYetWrittenToDisk: 'Data not yet written to disk. Try reload again later.',
			selectedCdrDoesNotContainRtcpData: 'Selected cdr does not contain rtcp data.',
			questionTryDecodeAsT30: 'Try decode as T30?',
			deleteCdr: 'Delete CDR - please wait...',
			sdpMediaType_audio: 'audio',
			sdpMediaType_image: 'image',
			sdpMediaType_video: 'video',
			rtpState_missing: 'no RTP streams',
			rtpState_exists: '1 or 2 RTP streams',
			rtpState_one_way: 'only 1 stream',
			rtpState_two_way: 'have 2 streams',
			changeSrcRtpPort_none: 'none',
			changeSrcRtpPort_caller: 'caller',
			changeSrcRtpPort_called: 'called',
			changeSrcRtpPort_caller_or_called: 'caller or called',
			changeSrcRtpPort_caller_and_called: 'caller and called',
			televentRequestResponse_request_with_response: 'request with response',
			televentRequestResponse_request_without_response: 'request without response',
			televentRequestResponse_no_request: 'no request',
			missingReasonColumns: 'Your database schema has to be upgraded to support this feature. Altering cdr table can take hours and will prevent sniffers to insert new data until the alter is done so run it after working hours. In mysql ' + applName + ' database run this alter command (we recommend to run "screen" before you connect to database) and after the alter will finish logout/login to the GUI: "ALTER TABLE cdr ADD COLUMN reason_sip_cause smallint unsigned DEFAULT NULL, ADD COLUMN reason_sip_text_id mediumint unsigned DEFAULT NULL, ADD COLUMN reason_q850_cause smallint unsigned DEFAULT NULL, ADD COLUMN reason_q850_text_id mediumint unsigned DEFAULT NULL, ADD KEY reason_sip_text_id (reason_sip_text_id), ADD KEY reason_q850_text_id (reason_q850_text_id);"',
			missingSilenceColumns: 'Your database schema has to be upgraded to support this feature. Altering cdr table can take hours and will prevent sniffers to insert new data until the alter is done so run it after working hours. In mysql ' + applName + ' database run this alter command (we recommend to run "screen" before you connect to database) and after the alter will finish logout/login to the GUI: "ALTER TABLE cdr ADD caller_silence tinyint unsigned default NULL, ADD called_silence tinyint unsigned default NULL, ADD caller_silence_end smallint default NULL, ADD called_silence_end smallint default NULL;"',
			missingClippingColumns: 'Your database schema has to be upgraded to support this feature. Altering cdr table can take hours and will prevent sniffers to insert new data until the alter is done so run it after working hours. In mysql ' + applName + ' database run this alter command (we recommend to run "screen" before you connect to database) and after the alter will finish logout/login to the GUI: "ALTER TABLE cdr ADD caller_clipping_div3 smallint unsigned default NULL, ADD called_clipping_div3 smallint unsigned default NULL;"',
			missingFracLostPktCColumns: 'Your database schema has to be upgraded to support this feature. Altering cdr table can take hours and will prevent sniffers to insert new data until the alter is done so run it after working hours. In mysql ' + applName + ' database run this alter command (we recommend to run "screen" before you connect to database) and after the alter will finish logout/login to the GUI: "ALTER TABLE cdr ADD COLUMN a_rtcp_fraclost_pktcount int unsigned default NULL, ADD COLUMN b_rtcp_fraclost_pktcount int unsigned default NULL;"',
			thereIsNoNodeInNetworkMap: 'There is no node in network map with sip/rtp IP address of this CDR.',
			currentSelectionIsEmpty: 'Current selection is empty.',
			dataTimeIgnoredInCombinationTemplates: 'date / time range is taken from common tab only - date / time range in templates are ignored',
			groupBy: 'group by',
			typeChart: 'type chart',
			maxGraphs: 'max graphs',
			attachedFile: 'attached file',
			lastModifiedBy: 'last modified by',
			noteTableIsOpen: 'the note table is open',
			graphIsNotAvailable: 'Graph is not available',
			chartIsNotAvailable: 'Chart is not available',
			rtpStream: 'RTP stream'
		},
		filtersCombination: {
			custom_filter: 'custom filter',
			tooltip_edit_custom_filter: 'edit custom filter',
			missing_filter_or_template: 'missing filter or template',
			col_delete_order: 'delete / order',
			col_logic_level: 'AND / OR level',
			col_not: 'not',
			col_filter_template: 'filter / template',
			col_id: 'id',
			btn_add: 'add',
			field_description: 'description',
			title_custom_filter: 'custom filter',
			tooltip_delete: 'delete',
			tooltip_move_up: 'move up',
			tooltip_move_down: 'move down',
			tooltip_logic_level_up: 'increase AND / OR level',
			tooltip_logic_level_down: 'decrease AND / OR level',
			error_filters_table_is_empty: 'filters table is empty',
			error_missing_filter_or_template_in_any_row: 'filter / template is empty in ids:',
			template_prefix: 'template:'
		},
		tooltip: {
			selectOnlyThisRow: 'select only this row',
			showSipHistory: 'show SIP history',
			addNote: 'add note',
			editNote: 'edit note',
			xPDV: 'median of jitter >50ms regradless on lenght of a call',
			maxRtd: 'Max RTCP Roundtrip delay aka latency in miliseconds. See Rfc 3550#section-6.4.1',
			avgRtd: 'Avg RTCP Roundtrip delay aka latency in miliseconds. See Rfc 3550#section-6.4.1',
			rtpStreamAnalysis: 'RTP stream analysis'
		},
		limitCdrForBatchDownloadIs: 'Limit cdr records for batch download is',
		limitCdrForBatchDownloadSolution: 'Use form filter or right click on column caller or called.',
		grid: {
			subject_note: 'note'
		}
	},
	group_stat: {
		menu: {
			sip_src_ip: 'SIP source IP',
			sip_dst_ip: 'SIP destination IP',
			rtp_src_ip: 'RTP source IP',
			rtp_dst_ip: 'RTP destination IP',
			src_phone_num: 'source phone number',
			dst_phone_num: 'destination phone number',
			caller: 'source phone number',
			called: 'destination phone number',
			a_ua: 'source user agent',
			b_ua: 'destination user agent',
			country_by_caller: 'country by source phone number',
			country_by_called: 'country by destination phone number',
			country_by_sipcallerip: 'country by SIP source IP',
			country_by_sipcalledip: 'country by SIP destination IP'
		},
		title: {
			distribution: 'distribution',
			callQuality: 'call quality',
			topCalls: 'top calls',
			topCalls_msg: 'top messages',
			topCallDistribution: 'top call distribution',
			topCallDistribution_msg: 'top messages distribution',
			charts: 'charts',
			rtp_stat: 'RTP stat',
			callDistribution: 'call distribution', 
			callDistribution_msg: 'messages distribution', 
			packetLossDistribution: 'packet loss distribution', 
			mosDistribution: 'mos distribution', 
			jitterDistribution: 'jitter distribution',
			pdvDistribution: 'PDV distribution',
			cdr: 'CDR'
		},
		chart: {
			callDistribution: 'call distribution',
			callDistribution_msg: 'messages distribution',
			callDistribution_run: 'ongoing',
			callDistribution_begin: 'begin',
			callDistribution_end: 'end'
		},
		text: {
			groupBy: 'group by',
			typeChart: 'type chart',
			maxGraphs: 'max graphs'
		}
	},
	messages: {
		column: {
			ID_sensor: 'ID<br><span style="font-size: 80%;">sensor id</span>',
			ID_sensor_name: 'ID<br><span style="font-size: 80%;">sensor id</span>',
			calldate2: 'Datetime',
			caller2: 'Caller num/name<br>SIP source IP<br>SIP agent',
			called2: 'Called num<br>SIP destination IP<br>SIP agent',
			lastresponse: 'Last response',
			message: 'Message',
			menu: 'Commands',
			time_s: 'time [s]',
			srcip: 'Source IP',
			dstip: 'Destination IP',
			sipMsg: 'SIP message',
			groupLastSIPresponse: 'SIP Response',
			groupSipIP_hostName: 'sip IP / host name',
			groupIP_group: 'IP Group',
			groupCountry: 'country',
			cnt_all: 'total Messages',
			cnt_perc: '%',
			proxy: 'Proxy'
		},
		field: {
			searchCallerCalled: 'Caller/Called',
			groupBy: 'group by',
			shareMessage_mailSubject: 'Share Message',
			shareMessage_mailMessage: 'Share Message links:\n\n',
			shareMessage_mailSignature: '\n---\n',
			relatedInterval_s: 'related interval [s]'
		},
		sortBy: {
			callerNumber: 'caller number',
			sipSourceIP: 'SIP source IP',
			calledNumber: 'called number',
			sipDestinationIP: 'SIP destination IP'
		},
		field_filter: {
			dateRange:		'Date range',
			dateFrom:		'From',
			dateTo:			'To',
			lastDaysMinutes:	'Last days',
			lastDaysMinutesHelp:	'',
			num:			'Number',
			num_start:		'Numb.start', 
			num_end:		'Numb.end', 
			num_contain:		'Numb.contain',
			num_regexp:		'Numb.regexp',
			numTriggerHelp:		'Select search type',
			countryCodeByNumber:	'&nbsp;&nbsp;&nbsp;&nbsp;country',
			callerName:		'Caller name',
			domain:			'Domain',
			IP:			'IP address',
			countryCodeByIP:	'&nbsp;&nbsp;&nbsp;&nbsp;country',
			proxyIp:		'Proxy',
			sipcallerdip_with_proxy:'include proxy',
			sipAgent:		'SIP agent',
			message:		'Message',
			sensor:			'Sensor',
			caller:			'Caller',
			called:			'Called',
			callerOrCalled:		'Caller or Called',
			callerGroup:		'Caller group',
			calledGroup:		'Called group',
			callerOrCalledGroup:	'Caller or Called group',
			callID:			'Call ID',
			messageType: 		'Message type',
			custhead_group:		'Custom header group',
			operLt:			' < ',
			operGt:			' >= '
		},
		button: {
			filterForm: 'filter form',
			resetFilter: 'reset filter',
			search: 'Search',
			close: 'Close',
			undock: 'undock',
			dock: 'dock',
			closeChart: 'close',
			addChart: 'add chart',
			wiresharkFilter: 'wireshark filter',
			typePackets: 'type',
			downloadPCAP: 'download PCAP',
			openPieChart: 'open pie chart',
			refreshInterval: 'refresh interval',
			settings: '',
			prepareSvgDiagram: 'generate network MAP',
			shareShowCdr: 'Share'
		},
		button_help: {
			filterForm: 'Show search form',
			resetFilter: 'Reset filter to default and reload data',
			settings: 'settings',
			viewUrl: 'Show current view & filter URL',
			advancedStatistics: 'advanced statistics'
		},
		menu: {
			shareMessages: 'Share Messages',
			shareSipHistory: 'Share SIP history',
			showLink: 'Show link',
			sendLinkViaEmail: 'Send link via e-mail',
			localPublic: 'local public',
			localPrivate: 'local private',
			merge: 'Merge',
			mergeSipPcap: 'SIP PCAP',
			mergeSipRtpPcap: 'SIP+RTP PCAP',
			mergeSipHistory: 'SIP HISTORY',
			showHttpJjViaExternalTransactionId: 'show http via external transaction id',
			enableDns: 'Enable DNS IP lookup',
			exportCSV: 'Export CSV',
			enableFlags: 'Enable flags',
			number: 'number',
			ip: 'IP',
			left: 'left',
			right: 'right',
			disable: 'disable'
		},
		tbar: {
			dateTimeRange: 'date, time range',
			dateTimeFrom: 'date, time from',
			dateTimeTo: 'date, time to',
			menu: 'menu',
			filter: 'filter',
			paginator: 'paginator'
		},
		title: {
			SipMessages: 'SIP MESSAGES',
			groups: 'Groups',
			groupBy: 'Group by',
			charts: 'Charts',
			searchForm: 'Search form',
			viewUrl: 'URL for current filter',
			summaryTab: 'summary',
			messagesTab: 'messages',
			diagramTab: 'diagram',
			sipHistory: 'SIP: history',
			sipHistoryTab: 'SIP: history',
			sipHistory_merge: 'SIP: history (merge)',
			packetDetail: 'Packet detail',
			messageTreeTab: 'message tree',
			pieChart: 'pie chart',
			groupDefinition: 'group definition',
			messageFilters: 'message filters',
			shareMessage: 'Share Message',
			shareMessageSendLinkViaEmail: 'Send link via e-mail',
			legsByHeaderTab: 'Legs by header',
			msgZeroMessagesForMerge: 'Not selected records',
			msgTooMuchMessagesForMerge: 'Too much selected records',
			advancedStatistics: 'Advanced statistics'
		},
		text: {
			msgZeroMessagesForMerge: 'Select records before merge!',
			msgTooMuchMessagesForMerge1: 'You selected',
			msgTooMuchMessagesForMerge2: 'records. Continue?',
			sharingIsNotPermitted: 'sharing is not permitted',
			dataAreNotYetWrittenToDisk: 'Data not yet written to disk. Try reload again later.'
		},
		tooltip: {
			showSipHistory: 'show SIP history'
		}
	},
	register: {
		column: {
			calldate: 'Datetime',
			created_at: 'Datetime',
			sipcallerip: 'Source IP',
			sipcalledip: 'Destination IP',
			src_mac: 'Source MAC',
			from_num: 'From Number',
			to_num: 'To Number',
			from_num_domain: 'From <span style="font-size:80%;color:grey;">number (name) / domain</span>',
			to_num_domain: 'To <span style="font-size:80%;color:grey;">number / domain</span>',
			contact_num_domain: 'Contact <span style="font-size:80%;color:grey;">number / domain</span>',
			digestusername: 'User name',
			digestusername_realm: 'User name / Realm',
			expires: 'Expires',
			expires_at: 'Expires / at',
			rrd_avg: 'RRD avg',
			state: 'State',
			ua_str: 'User agent',
			commands: 'Commands',
			counter: 'counter'
		},
		field: {
			ip_address: 'IP address',
			net_mask: 'Network mask',
			number_prefix: 'Phone number prefix',
			auto_remove_at: 'Auto remove at',
			reload_sniffer: 'Reload sniffer'
		},
		field_filter: {
			calldate: 'Call time',
			created_at: 'Created at',
			counter: 'Counter',
			ip_address: 'IP address',
			caller_ip: 'Caller IP',
			called_ip: 'Called IP',
			caller_or_called_ip: 'Caller or Called IP',
			number: 'Number',
			name_from: 'Name from',
			domain: 'Domain',
			domain_contact: 'Domain contact',
			username: 'User name',
			realm: 'Realm',
			rrd_avg: 'RRD avg',
			expires: 'Expires',
			expires_at: 'Expires at',
			state: 'State',
			ua: 'User agent',
			sensor: 'Sensor',
			from: 'From',
			to: 'To',
			contact: 'Contact',
			from_to_contact: 'From or To or Contact',
			group: 'group',
			detectSIPALG: 'SIP-ALG',
			cmp_oper_ge: ' >= ',
			cmp_oper_lt: ' < '
		},
		field_filter_help: {
		},
		button: {
			filterForm: 'Filter Form',
			resetFilter: 'Reset filter',
			search: 'Search',
			close: 'Close'
		},
		button_help: {
			filterForm: 'Show search form',
			filterFormViewUrl: 'Show current view & filter URL',
			resetFilter: 'Reset filter to default and reload data'
		},
		menu: {
			exportCSV: 'Export CSV',
			addToCaptureRules: 'add to capture rules',
			removeFromCaptureRules: 'remove from capture rules',
			filterByNumber: 'number',
			filterByIP: 'IP address',
			filterByNumberAndIP: 'number and IP address',
			filterByNumberOrIP: 'number or IP address'
		},
		toolbar: {
			from: 'from',
			to: 'to',
			userName: 'user name',
			refreshInterval: 'refresh interval',
			filterBy: 'filter by'
		},
		tooltip: {
			tools: 'tools'
		},
		title: {
			filterForm: 'Filter form',
			filterFormViewUrl: 'URL for current filter',
			newCaptureRule: 'New capture rule',
			removeCaptureRule: 'Remove capture rule',
			state: 'state',
			stateFilteredBy: 'state filtered by',
			relatedCDR: 'related CDR',
			failed: 'failed',
			noData: 'no data',
			registerActive: 'Register - Active',
			registerState: 'Register - State',
			registerFailed: 'Register - Failed'
		},
		text: {
			removeCaptureRuleQuestion: 'Remove capture rule:',
			noDataInExpandArea: 'Expand area does not contain data'
		}
	},
	sip_msg: {
		column: {
			ID_sensor: 'ID<br><span style="font-size: 80%;">sensor id</span>',
			ID_sensor_name: 'ID<br><span style="font-size: 80%;">sensor id</span>',
			datetime: 'Datetime',
			ip_port_src: '<table border="0" cellspacing="0" cellpadding="0" style="font-size: inherit; border-spacing: 0; border-collapse: collapse;">' +
				     '<tr><td>IP<br>port<td style="padding-left: 5px;">src</table>',
			ip_port_dst: '<table border="0" cellspacing="0" cellpadding="0" style="font-size: inherit; border-spacing: 0; border-collapse: collapse;">' +
				     '<tr><td>IP<br>port<td style="padding-left: 5px;">dst</table>',
			number_domain_src: '<table border="0" cellspacing="0" cellpadding="0" style="font-size: inherit; border-spacing: 0; border-collapse: collapse;">' +
					   '<tr><td>Number<br>Domain<td style="padding-left: 5px;">src</table>',
			number_domain_dst: '<table border="0" cellspacing="0" cellpadding="0" style="font-size: inherit; border-spacing: 0; border-collapse: collapse;">' +
					   '<tr><td>Number<br>Domain<td style="padding-left: 5px;">dest</table>',
			ua_src: 'User Agent src',
			ua_dst: 'User Agent dest',
			response_time: 'Response Time',
			response_duration_ms: 'Response duration',
			response_type: 'Response Type',
			menu: 'Commands'
		},
		field: {
			name: 'name',
			type: 'type',
			options: 'options',
			subscribe: 'subscribe',
			notify: 'notify',
			conditions: 'conditions',
			descr: 'description',
			ok_qualify_limit: 'qualify limit [ms]',
			ok_responses: 'ok responses',
			ip_src: 'IP src',
			ip_dst: 'IP dest',
			number_src: 'Number src',
			number_dst: 'Number dest',
			domain_src: 'Domain src',
			domain_dst: 'Domain dest'
		},
		sortBy: {
			ip_src: 'IP src',
			ip_dst: 'IP dst',
			port_src: 'port src',
			port_dst: 'port dst',
			number_src: 'number src',
			number_dst: 'number dst',
			domain_src: 'domain src',
			domain_dst: 'domain dst'
		},
		field_filter: {
			time: 'Time',
			timeFrom: 'from',
			timeTo: 'to',
			ip_address: 'IP address',
			ip_src: 'src',
			ip_dst: 'dest',
			ip_src_group_id: 'src group',
			ip_dst_group_id: 'dest group',
			port: 'Port',
			port_src: 'src',
			port_dst: 'dest',
			number: 'Number',
			number_src: 'src',
			number_dst: 'dest',
			domain: 'Domain',
			number_src: 'src',
			number_dst: 'dest',
			ua: 'user agent',
			ua_src: 'src',
			ua_dst: 'dest',
			src_or_dst: 'src or dest',
			src: 'src',
			src_or_dst_group: 'src or dest group',
			src_group: 'src group',
			qualify_state: 'Qualify state',
			qualify_ok: 'ok',
			qualify_bad: 'bad',
			response_duration: 'Response duration [ms]',
			response_number: 'Response number',
			callername: 'Callername',
			callID: 'CallID',
			cseq: 'Cseq',
			requestContentType: 'Request Content type',
			requestContent: 'Request Content',
			responseContentType: 'Response Content type',
			responseContent: 'Response Content',
			sensor: 'Sensor',
			cmp_oper_ge: ' >= ',
			cmp_oper_lt: ' < '
		},
		field_filter_help: {
		},
		button: {
			filterForm: 'Filter Form',
			resetFilter: 'Reset filter',
			search: 'Search',
			close: 'Close'
		},
		button_help: {
			filterForm: 'Show search form',
			filterFormViewUrl: 'Show current view & filter URL',
			resetFilter: 'Reset filter to default and reload data'
		},
		menu: {
			exportCSV: 'Export CSV'
		},
		toolbar: {
			refreshInterval: 'refresh interval',
			interval: 'interval'
		},
		title: {
			filterForm: 'Filter form',
			filterFormViewUrl: 'URL for current filter',
			sip_msg_active: 'Options / Subscribe / Notify - active',
			sip_msg_stored: 'Options / Subscribe / Notify - stored',
			settings: 'Settings',
			history: 'History',
			stored: 'Stored',
			settingsTable: 'table',
			settingsDefaults: 'defaults',
			summaryTab: 'summary',
			requestTreeTab: 'request xml tree',
			responseTreeTab: 'response xml tree'
		}
	},
	ss7: {
		column: {
			ID_sensor: 'ID<br><span style="font-size: 80%;">sensor id</span>',
			ID_sensor_name: 'ID<br><span style="font-size: 80%;">sensor id</span>',
			time_iam: 'Datetime',
			duration: 'Duration&nbsp;<span style="font-size: 9">(PDD)</span><br>Connect duration',
			cic: 'CIC',
			caller_number: 'Caller',
			called_number: 'Called',
			state: 'State',
			menu: 'Commands',
			time_s: 'time [s]',
			direction: 'direction',
			ss7Msg: 'SS7 message'
		},
		field: {
			searchCallerCalled: 'Caller/Called'
		},
		sortBy: {
			duration: 'duration',
			progress_time: 'progress time',
			connect_duration: 'connect duration',
			caller_number: 'caller number',
			opc: 'OPC',
			called_number: 'called number',
			dpc: 'DPC'
		},
		field_filter: {
			timeRange:		'Time range',
			timeFrom:		'From',
			timeTo:			'To',
			lastDaysMinutes:	'Last days',
			lastDaysMinutesHelp:	'',
			num:			'Number',
			num_start:		'Numb.start', 
			num_end:		'Numb.end', 
			num_contain:		'Numb.contain',
			num_regexp:		'Numb.regexp',
			numTriggerHelp:		'Select search type',
			countryCodeByNumber:	'&nbsp;&nbsp;&nbsp;&nbsp;country',
			cic:			'CIC',
			opc:			'OPC',
			dpc:			'DPC',
			duration:		'Call duration [s]',
			connect_duration:	'Connect duration [s]',
			progress_time:		'Progress time [s]',
			sensor:			'Sensor',
			caller:			'Caller',
			called:			'Called',
			callerOrCalled:		'Caller or Called',
			callerGroup:		'Caller group',
			calledGroup:		'Called group',
			callerOrCalledGroup:	'Caller or Called group',
			operLt:			' < ',
			operGt:			' >= '
		},
		button: {
			filterForm: 'filter form',
			resetFilter: 'reset filter',
			search: 'Search',
			close: 'Close',
			addChart: 'add chart',
			refreshInterval: 'refresh interval'
		},
		button_help: {
			filterForm: 'Show search form',
			resetFilter: 'Reset filter to default and reload data',
			viewUrl: 'Show current view & filter URL'
		},
		menu: {
			enableDns: 'Enable DNS IP lookup',
			exportCSV: 'Export CSV',
			enableFlags: 'Enable flags',
			number: 'number',
			ip: 'IP',
			left: 'left',
			right: 'right',
			disable: 'disable'
		},
		tbar: {
			dateTimeRange: 'date, time range',
			dateTimeFrom: 'date, time from',
			dateTimeTo: 'date, time to',
			menu: 'menu',
			filter: 'filter',
			paginator: 'paginator'
		},
		title: {
			SS7: 'SS7',
			searchForm: 'Search form',
			viewUrl: 'URL for current filter',
			summaryTab: 'summary',
			historyTab: 'SS7: history',
			packetDetail: 'Packet detail'
		}
	},
	charts: {
		column: {
			interval_limit: 'limit',
			interval_last: 'last interval',
			color: 'color',
			descr: 'description'
		},
		field: {
			from: 'from',
			to: 'to',
			time_offset_name_title: 'Name / title',
			time_offset_hours: 'Hours',
			time_offset_days: 'Days',
			time_offset_months: 'Months',
			interval_limit: 'Limit',
			interval_last: 'Last interval',
			color: 'Color',
			templates: 'templates',
			timeAxis: 'time axis',
			timeInterval: 'time interval',
			intervalOffset: 'interval offset',
			theme: 'theme',
			title: 'title',
			axisTitleLeft: 'left axis title',
			axisTitleRight: 'right axis title',
			minAxisWidth: 'min. legend width',
			legendPosition: 'legend position',
			limitLineValue: 'mark line value',
			limitLineColor: 'color',
			percTrend: 'percent.line trend',
			perc95_Color: 'perc.95',
			perc99_Color: 'perc.99',
			chartName: 'chart name',
			combinationToArea: 'combine to stacked area / columns',
			maximumAreaItems: 'maximum area items',
			seriesTitle: 'series title'
		},
		column: {
			series: 'series',
			param: 'param',
			sideAxis: 'axis side',
			primaryAxis: 'primary',
			baseType: 'type',
			lineType: 'line',
			color: 'color',
			trend: 'trend',
			fill: 'fill',
			markers: 'markers',
			smooth: 'smooth',
			percent: 'percent',
			filters: 'filters',
			tools: 'tools'
		},
		combodata: {
			left: 'left',
			right: 'right',
			line: 'line',
			column: 'column',
			column_line: 'auto',
			area: 'area',
			trend: 'trend',
			solid: 'solid',
			dashed: 'dashed',
			dotted: 'doted',
			asc: 'asc',
			desc: 'desc'
		},
		grid: {
			subject_interval: ' '
		},
		text: {
			interval_last: 'last interval',
			msgInvalidQuery: 'Invalid query or data',
			msgInvalidQueryDescr: 'There is no CDR in your query',
			msgInvalidQueryDescr_messages: 'There is no Message in your query',
			msgInvalidQueryDescr_sip_msg: 'There is no opt.,subsc.,notify in your query',
			msgInvalidQueryDescr_records: 'There is no record in your query',
			msgInvalidNewQuery: 'Invalid new query',
			msgInvalidNewQueryDescr: 'There are no CDRs for your query. Using previouse query.',
			msgInvalidNewQueryDescr_messages: 'There are no Messages for your query. Using previouse query.',
			msgInvalidNewQueryDescr_sip_msg: 'There are no opt.,subsc.,notify for your query. Using previouse query.',
			msgInvalidNewQueryDescr_records: 'There are no records for your query. Using previouse query.',
			msgPhpCalcWarningMsgHeader: 'PHP calc warning',
			msgPhpCalcWarningMsgText: 'Used PHP calc. Check your installation!',
			emptyIntervalMsgHeader: 'empty interval',
			emptyIntervalMsgText: 'Not exists any begin call in select interval. Try another interval.',
			msgDuplicationNameTitle: 'duplication name',
			msgDuplicationNameText: 'Name is used. Overwrite?',
			msgDeleteChartConfirmTitle: 'delete chart config',
			msgDeleteChartConfirmText: 'delete current template?',
			errorMissingSeries: 'Incomplete configuration. Missing series!',
			errorMultipleArea: 'Bad configuration. Select only one \'area\' series!',
			autoSet: 'auto'
		},
		button: {
			undock: 'undock',
			apply: 'apply',
			cancel: 'cancel',
			saveTemplate: 'save template',
			deleteTemplate: 'delete template',
			ok: 'OK',
			close: 'Close',
			remove: 'Remove'
		},
		tooltip: {
			prev: 'prev',
			next: 'next',
			saveAsSVG: 'save as SVG',
			saveAsPDF: 'save as PDF',
			newTrackerTicket: 'new issue ticket',
			editChart: 'edit chart',
			closeChart: 'close chart',
			undockChart: 'undock chart',
			seriesFilter: 'series filter',
			intervalOffsetHelp: 'This option shifts the end of the timeline from now() to now() - X minutes. This is useful when you do not want to see downward trend due to the fact that there are still ongoing calls which is not yet in the chart.',
			seriesTools: 'series tools'
		},
		fieldset: {
			dateRange: 'date range',
			series: 'series',
			description: 'description'
		},
		title: {
			charts: 'Charts',
			date_range: 'date range',
			time_offset: 'time offset',
			intervals: 'intervals',
			colors: 'colors',
			chartConfiguration: 'chart configuration',
			baseChartData: 'base chart data',
			filters: 'filters',
			filtersCommon: 'filters - common',
			filtersRtp: 'filters - RTP',
			filtersDscp: 'filters - DSCP',
			filtersComb: 'filters - combination',
			filterCommon: 'common',
			filterRTP: 'RTP',
			filterDSCP: 'DSCP',
			filterFiltersComb: 'combination',
			saveChartConfig: 'save chart config',
			seriesFilter: 'Series Filter'
		},
		menu: {
			simpleConvert: 'simple convert',
			pageFormat: 'page format'
		}
	},
	chart3d: {
		menu: {
			rtp_ip: 'RTP IP',
			showChartsMosJitterLoss: 'show charts MOS, jitter, packet loss',
			showCDR: 'show CDR',
			setCDR_filter: 'set CDR filter'
		},
		button: {
			previous: 'previous',
			next: 'next'
		}
	},
	activecalls: {
		column: {
			sensor: 'Sensor',
			time: 'Time',
			duration: 'Duration<br>connected',
			callercodec: 'Codec',
			caller: 'Caller number<br>domain',
			called: 'Called number<br>domain',
			callerip: 'Caller IP',
			calledip: 'Called IP',
			sipproxies: 'Proxy',
			calleragent: 'Caller Agent',
			calledagent: 'Called Agent',
			callername: 'Caller Name',
			lastSIPresponseNum: 'Last resp.',
			menu: 'Commands'
		},
		field: {
			nationalOrInternational: 'national / international',
			refreshInterval: 'refresh interval',
			sensor: 'sensor',
			filter: 'filter',
			connected: 'connected'
		},
		title: {
			ActiveCalls: 'Active Calls',
			charts: 'Charts',
			calls_per_ip: 'Calls per IP',
			calls_per_ip_stacked: 'Calls per IP - stacked',
			realtime_calls: 'Realtime calls',
			realtime_top_source_ip: 'Realtime top source IP',
			realtime_top_destination_ip: 'Realtime top destination IP',
			recordsByCallerIP: 'records by caller ip',
			recordsByCalledIP: 'records by called ip',
			caller: 'caller',
			called: 'called',
			RealtimeRTP: 'Realtime RTP'
		},
		text: {
			noActiveCalls: 'no active calls',
			liveaudioIsDisabled: 'Live listening is turned off in sniffer configuration - change liveaudio = yes'
		}
	},
	livepacket: {
		firstSelectSensor: 'First, select a sensor!',
		warningStartWithoutFilter: 'Start the livesniffer without the filter by IP or number can overload the browser.<br><br>' + 
					   'Continue?'
	},
	http: {
		column: {
			id_sensor: 'ID<br><span style="font-size: 80%;">sensor id</span>',
			timestamp: 'time',
			srcip_port: 'source ip<br>port',
			dstip_port: 'destination ip<br>port',
			url: 'url',
			http: 'http',
			body: 'body',
			response_http: 'response http',
			response_body: 'response body',
			callid: 'call id',
			sessid: 'sess id',
			external_transaction_id: 'external trans. id'
		},
		field_filter: {
			externalTransactionId: 'External transaction id',
			dateRange: 'Date range',
			from: 'From',
			to: 'To',
			IP: 'IP',
			port: 'Port',
			srcOrDst: 'Src or Dst',
			src: 'Src',
			dst: 'Dst',
			url: 'URL',
			http: 'Http',
			body: 'Body',
			httpResponse: 'Http response',
			bodyResponse: 'Body response',
			callid: 'Call id',
			sessid: 'Sess id',
			external_transaction_id: 'External trans. id',
			sensor: 'Sensor'
		},
		button: {
			search: 'Search',
			close: 'Close'
		},
		menu: {
			showHttpJjViaExternalTransactionId: 'Show HTTP via external transaction id'
		},
		tbar: {
			dateTimeRange: 'date, time range',
			dateTimeFrom: 'date, time from',
			dateTimeTo: 'date, time to',
			menu: 'menu',
			filter: 'filter',
			paginator: 'paginator'
		},
		title: {
			http: 'HTTP',
			searchForm: 'Search form',
			showHttpJjViaExternalTransactionId: 'Show HTTP via external transaction id'
		},
		text: {
			maximumDateRangeIs168hours: 'maximum date range is 168 hours'
		}
	},
	ipaccount: {
		column: {
			addr_ip: 'address',
			customer: 'customer',
			protocol: 'protocol',
			port: 'port',
			download: 'download',
			upload: 'upload',
			downloadAll: 'D all',
			uploadAll: 'U all',
			downloadVoip: 'D VoIP',
			uploadVoip: 'U VoIP',
			total: 'total',
			traffic_sum_minute: 'last minute',
			traffic_sum_hour: 'last hour',
			traffic_sum_day: 'last day',
			traffic_sum_week: 'last week',
			traffic_sum_month: 'last month',
			hideEmpty: 'hide empty',
			city: 'city',
			address: 'address',
			connection_type: 'connection type'
		},
		field: {
			IP: 'IP',
			IP_network: 'IP/network',
			customer: 'customer'
		},
		button: {
			realTimeChart: 'realtime chart'
		},
		button_help: {
			prev: 'prev',
			next: 'next',
			saveAsSVG: 'save as SVG'
		},
		sortBy: {
			traffic: 'traffic',
			trafficDown: 'traffic down',
			trafficUp: 'traffic up',
			trafficSum: 'traffic sum',
			packets: 'packets',
			packetsDown: 'packets down',
			packetsUp: 'packets up',
			packetsSum: 'packets sum'
		},
		title: {
			top10: 'TOP 10',
			customerServices: 'customer services',
			IP: 'IP',
			oppositeDirection: 'opposite direction',
			protocol: 'protocol',
			port: 'port',
			IP_account: 'IP account',
			chartsAll: 'charts / all',
			chartsVoip: 'charts / VoIP',
			chart_traffic: 'traffic / line',
			chart_traffic_area: 'traffic / area',
			chart_packets: 'packets / line',
			chart_packets_area: 'packets / area',
			chart_traffic_top_10_in: 'TOP 10 - IN',
			chart_traffic_top_10_out: 'TOP 10 - OUT',
			chart_realTime: 'realtime chart',
			chart_realTime_all: 'ALL',
			chart_realTime_voip: 'VoIP',
			chart_realTime_all_voip: 'ALL & VoIP'
		},
		speed: 'speed',
		speedVoip: 'speed VoIP',
		speedIn: 'speed in',
		speedOut: 'speed out',
		speedVoipIn: 'speed VoIP in',
		speedVoipOut: 'speed VoIP out'
	},
	dashboard_d: {
		field: {
			templateName: 'name',
			templateFolder: 'folder',
			privateTemplate: 'private',
			templateNameName: 'template name',
			showForUsers: 'restrict for users',
			showForGroups: 'show for groups',
			title: 'title',
			interval: 'interval',
			lastDaysMinutes: 'last days, minutes',
			floatingInterval: 'floating interval',
			prevInterval: 'prev interval',
			refreshPeriod: 'refresh period',
			intervalOffset: 'interval offset',
			useOnlyCache: 'use aggregation/rrd<br>(beta version)',
			withoutSipResponse200: 'without response 200 - OK',
			bySourceOrDestination: 'by source or destination',
			byCountry_sourceOrDestination: 'by country (source or destination)',
			byCallerOrCalled: 'by caller or called',
			byUA_callerOrCalled: 'by UA (caller or called)',
			byCountry_callerOrCalled: 'by country (caller or called)',
			panelType: 'panel type',
			autoopenSetup: 'autoopen setup',
			seconds: 'sec',
			minutes: 'min',
			sort_by: 'sort by',
			sort_dir: 'sort direction',
			max_rows: 'maximum rows',
			total_perc: 'show column \'%\'',
			layout: 'layout',
			layoutConfiguration: 'layout configuration',
			typeSensorRRD: 'graph',
			typeChart: 'type chart',
			module: 'module',
			graph: 'graph',
			enable_dns_ip_lookup: 'Enable DNS IP lookup',
			IP: 'IP',
			caller_called_by: 'src/dst by',
			items_scale: 'items scale',
			autocenter: 'auto center & zoom',
			latitude_longitude: 'lat/lng',
			zoom: 'zoom',
			lineColors: 'line colors',
			chartLengthMinutes: 'chart length',
			chartType: 'chart type',
			filters: 'filters',
			onlyConnected: 'only connected',
			internationalOrLocal: 'international / local',
			numbers: 'numbers',
			numbers_group: 'numbers group',
			addresses: 'addresses',
			ip_group: 'addresses group',
			enable_for_all: 'enable for all charts',
			overlap_minutes: 'overlap minutes',
			//missing_minutes_ok: 'missing minutes is ok',
			compute_processes: 'number of parallel tasks',
			//compute_process_max_run: 'max charts per one task'
			temporarily_suspended: 'temporary suspend',
			temporarily_autosuspended_if_sqlf_cdr_gt: 'temporary auto-suspend if \'sqlf/cdr\' in sniffer log >',
			name: 'name'
		},
		field_help: {
			enable_for_all: 'When enabled all charts will use aggregations and you will be not able to turn it off individually. If you have many charts which you are not using often or at all do not enable this and enable the aggregation only for charts you actually use.',
			overlap_minutes: 'How long to look back when calculating data for charts. By default it is 120 minutes and if you have significant number of longer calls than 120 minutes change this to higher values.',
			//missing_minutes_ok: '',
			compute_processes: 'Number of running processes running in parallel. Change this to higher values if your charts are behind current time or if you have enough CPU cores.'
			//compute_process_max_run: ''
		},
		field_rtp3d: {
			interval: 'interval [s]',
			agregation_type: 'agregation',
			number: '#items',
			scale: 'scale',
			font_size: 'font size',
			font_color: 'font color',
			max_value: 'max Z value',
			times: 'X:time',
			addresses: 'Y:hosts',
			values: 'Z:values',
			curve_font_size: 'hover font size',
			camera_position: 'camera position',
			camera_lookat: 'lookat',
			camera_perspective: 'perspective'
		},
		help_rtp3d: {
			interval: 'Lowest interval is 10 seconds which is default resolution. For hour interval set 3600 which will aggregate 360 values into one value.',
			agregation_type: 'If aggregation is > 10 seconds choose if you want to see MAX/MIN value (depends on mos/loss) or average value. Note that if you choose average MOS and average aggregation (if interval > 10) it is different than choosing max/min MOS and average aggregation.',
			number: 'X:time is number of values on time X axe (default 20 values). Y:hosts is number of IP addresses on host Y axe (default 15 in dashboard).',
			scale: 'Scale x,y,z chart.',
			font_size: 'Font size in percentage (100% is default)',
			font_color: 'font color',
			max_value: 'Z:value - maximum value on Z axe',
			times: 'X:time is number of values on time X axe',
			addresses: 'Y:hosts is number of IP addresses on host Y axe',
			values: 'Z:value - maximum value on Z axe',
			curve_font_size: 'Font size for numbers which shows when you hover over data',
			camera_position: 'Camera position on 3d space x,y,z axe. Click on reload button to load current camera position',
			camera_lookat: 'Camera direction',
			camera_perspective: 'Field of view'
		},
		column: {
			sipip: 'sip IP / host name',
			rtpip: 'rtp IP / host name',
			phone_numb: 'number',
			ua: 'user agent',
			country: 'country',
			lastSIPresponse: 'sip response',
			cnt_all: 'total CDR',
			cnt_all_cdr: 'total CDR',
			cnt_all_messages: 'total Messages',
			total_perc: '%',
			duration_all: '∑ minutes',
			asr_all: 'ASR',
			ner_all: 'NER',
			acd_all: 'ACD',
			mos_all: 'MOS',
			mos_perc95_all: 'MOS %95',
			mos_perc99_all: 'MOS %99',
			mos_xr_avg_all: 'XR avg',
			mos_xr_avg_perc95_all: 'XR avg %95',
			mos_xr_avg_perc99_all: 'XR avg %99',
			mos_xr_avg_caller_all: 'XR avg A',
			mos_xr_avg_caller_perc95_all: 'XR avg A %95',
			mos_xr_avg_caller_perc99_all: 'XR avg A %99',
			mos_xr_avg_called_all: 'XR avg B',
			mos_xr_avg_called_perc95_all: 'XR avg B %95',
			mos_xr_avg_called_perc99_all: 'XR avg B %99',
			mos_xr_min_all: 'XR min',
			mos_xr_min_perc95_all: 'XR min %95',
			mos_xr_min_perc99_all: 'XR min %99',
			mos_xr_min_caller_all: 'XR min A',
			mos_xr_min_caller_perc95_all: 'XR min A %95',
			mos_xr_min_caller_perc99_all: 'XR min A %99',
			mos_xr_min_called_all: 'XR min B',
			mos_xr_min_called_perc95_all: 'XR min B %95',
			mos_xr_min_called_perc99_all: 'XR min B %99',
			mos_silence_avg_all: 'Silence avg',
			mos_silence_avg_perc95_all: 'Silence avg %95',
			mos_silence_avg_perc99_all: 'Silence avg %99',
			mos_silence_avg_caller_all: 'Silence avg A',
			mos_silence_avg_caller_perc95_all: 'Silence avg A %95',
			mos_silence_avg_caller_perc99_all: 'Silence avg A %99',
			mos_silence_avg_called_all: 'Silence avg B',
			mos_silence_avg_called_perc95_all: 'Silence avg B %95',
			mos_silence_avg_called_perc99_all: 'Silence avg B %99',
			mos_silence_min_all: 'Silence min',
			mos_silence_min_perc95_all: 'Silence min %95',
			mos_silence_min_perc99_all: 'Silence min %99',
			mos_silence_min_caller_all: 'Silence min A',
			mos_silence_min_caller_perc95_all: 'Silence min A %95',
			mos_silence_min_caller_perc99_all: 'Silence min A %99',
			mos_silence_min_called_all: 'Silence min B',
			mos_silence_min_called_perc95_all: 'Silence min B %95',
			mos_silence_min_called_perc99_all: 'Silence min B %99',
			mos_lqo_caller_all: 'LQO A',
			mos_lqo_caller_perc95_all: 'LQO A %95',
			mos_lqo_caller_perc99_all: 'LQO A %99',
			mos_lqo_called_all: 'LQO B',
			mos_lqo_called_perc95_all: 'LQO B %95',
			mos_lqo_called_perc99_all: 'LQO B %99',
			packets_lost_all: 'PL',
			packets_lost_perc95_all: 'PL %95',
			packets_lost_perc99_all: 'PL %99',
			jitter_all: 'J',
			jitter_perc95_all: 'J %95',
			jitter_perc99_all: 'J %99',
			delay_all: 'D',
			delay_perc95_all: 'D %95',
			delay_perc99_all: 'D %99',
			pdd_all: 'PDD',
			pdd_perc95_all: 'PDD %95',
			pdd_perc99_all: 'PDD %99',
			cps_max: 'CPS max',
			cps_avg: 'CPS avg',
			rtcp_maxfr: 'RTCP FL max',
			rtcp_maxfr_perc95_all: 'RTCP FL max %95',
			rtcp_maxfr_perc99_all: 'RTCP FL max %99',
			rtcp_avgfr: 'RTCP FL avg',
			rtcp_avgfr_perc95_all: 'RTCP FL avg %95',
			rtcp_avgfr_perc99_all: 'RTCP FL avg %99',
			rtcp_maxjitter: 'RTCP jitter max',
			rtcp_maxjitter_perc95_all: 'RTCP jitter max %95',
			rtcp_maxjitter_perc99_all: 'RTCP jitter max %99',
			rtcp_avgjitter: 'RTCP jitter avg',
			rtcp_avgjitter_perc95_all: 'RTCP jitter avg %95',
			rtcp_avgjitter_perc99_all: 'RTCP jitter avg %99',
			rtcp_maxrtd: 'RTCP Rtd max',
			rtcp_maxrtd_perc95_all: 'RTCP Rtd max %95',
			rtcp_maxrtd_perc99_all: 'RTCP Rtd max %99',
			rtcp_avgrtd: 'RTCP Rtd avg',
			rtcp_avgrtd_perc95_all: 'RTCP Rtd avg %95',
			rtcp_avgrtd_perc99_all: 'RTCP Rtd avg %99',
			silence_all: 'S',
			silence_perc95_all: 'S %95',
			silence_perc99_all: 'S %99',
			silence_end_all: 'LS',
			silence_end_perc95_all: 'LS %95',
			silence_end_perc99_all: 'LS %99',
			clipping_all: 'CF',
			clipping_perc95_all: 'CF %95',
			clipping_perc99_all: 'CF %99',
			price_customer: 'price C',
			price_operator: 'price O',
			price_difference: 'price D',
			id_sensor: 'id',
			name: 'name',
			version: 'version',
			pbStatString: 'status',
			storingCdrLastSavedAt: 'last calldate in SQL',
			storingCdrLastWriteAt: 'last time in queue',
			pbCountPacketDrop: '#packet drops',
			uptime: 'uptime',
			host: 'host',
			port: 'port',
			saddr: 'IP',
			counter: 'counter',
			mos_f1_min: 'mos f1 min',
			mos_f1_avg: 'mos f1 avg',
			mos_f2_min: 'mos f2 min',
			mos_f2_avg: 'mos f2 avg',
			mos_ad_min: 'mos adapt min',
			mos_ad_avg: 'mos adapt avg',
			jitter_max: 'jitter max',
			jitter_avg: 'jitter avg',
			loss_max: 'loss max',
			loss_avg: 'loss avg',
			chartSuffix: ' - chart'
		},
		button: {
			addPanel: 'add panel',
			setDefaultTemplate: 'set default',
			saveTemplate: 'save',
			editTemplate: 'edit',
			deleteTemplate: 'delete',
			selectTemplate: 'dashboard',
			save: 'save',
			cancel: 'cancel',
			removeAllPanels: 'remove all',
			reloadAll: 'reload all',
			newDashboard: 'new / duplicate',
			newLayout: 'new dashboard',
			duplicate: 'duplicate',
			urlDashboard: 'URL'
		},
		button_help: {
			urlDashboard: 'Show current dashboard / view URL'
		},
		menu: {
			resume: 'resume',
			pause: 'pause',
			refresh: 'refresh',
			panelSetup: 'panel setup',
			undock: 'undock',
			dock: 'dock',
			close: 'close',
			cnt_all: 'total CDR',
			total_perc: '%',
			duration_all: '∑ minutes',
			asr_all: 'ASR',
			ner_all: 'NER',
			acd_all: 'ACD',
			mos_all: 'MOS',
			mos_perc95_all: 'MOS %95',
			mos_perc99_all: 'MOS %99',
			mos_xr_avg_all: 'MOS XR avg Both',
			mos_xr_avg_perc95_all: 'MOS XR avg Both %95',
			mos_xr_avg_perc99_all: 'MOS XR avg Both %99',
			mos_xr_avg_caller_all: 'MOS XR avg Caller (A)',
			mos_xr_avg_caller_perc95_all: 'MOS XR avg Caller (A) %95',
			mos_xr_avg_caller_perc99_all: 'MOS XR avg Caller (A) %99',
			mos_xr_avg_called_all: 'MOS XR avg Called (B)',
			mos_xr_avg_called_perc95_all: 'MOS XR avg Called (B) %95',
			mos_xr_avg_called_perc99_all: 'MOS XR avg Called (B) %99',
			mos_xr_min_all: 'MOS XR min Both',
			mos_xr_min_perc95_all: 'MOS XR min Both %95',
			mos_xr_min_perc99_all: 'MOS XR min Both %99',
			mos_xr_min_caller_all: 'MOS XR min Caller (A)',
			mos_xr_min_caller_perc95_all: 'MOS XR min Caller (A) %95',
			mos_xr_min_caller_perc99_all: 'MOS XR min Caller (A) %99',
			mos_xr_min_called_all: 'MOS XR min Called (B)',
			mos_xr_min_called_perc95_all: 'MOS XR min Called (B) %95',
			mos_xr_min_called_perc99_all: 'MOS XR min Called (B) %99',
			mos_silence_avg_all: 'MOS Silence avg Both',
			mos_silence_avg_perc95_all: 'MOS Silence avg Both %95',
			mos_silence_avg_perc99_all: 'MOS Silence avg Both %99',
			mos_silence_avg_caller_all: 'MOS Silence avg Caller (A)',
			mos_silence_avg_caller_perc95_all: 'MOS Silence avg Caller (A) %95',
			mos_silence_avg_caller_perc99_all: 'MOS Silence avg Caller (A) %99',
			mos_silence_avg_called_all: 'MOS Silence avg Called (B)',
			mos_silence_avg_called_perc95_all: 'MOS Silence avg Called (B) %95',
			mos_silence_avg_called_perc99_all: 'MOS Silence avg Called (B) %99',
			mos_silence_min_all: 'MOS Silence min Both',
			mos_silence_min_perc95_all: 'MOS Silence min Both %95',
			mos_silence_min_perc99_all: 'MOS Silence min Both %99',
			mos_silence_min_caller_all: 'MOS Silence min Caller (A)',
			mos_silence_min_caller_perc95_all: 'MOS Silence min Caller (A) %95',
			mos_silence_min_caller_perc99_all: 'MOS Silence min Caller (A) %99',
			mos_silence_min_called_all: 'MOS Silence min Called (B)',
			mos_silence_min_called_perc95_all: 'MOS Silence min Called (B) %95',
			mos_silence_min_called_perc99_all: 'MOS Silence min Called (B) %99',
			mos_lqo_caller_all: 'MOS LQO Caller (A)',
			mos_lqo_caller_perc95_all: 'MOS LQO Caller (A) %95',
			mos_lqo_caller_perc99_all: 'MOS LQO Caller (A) %99',
			mos_lqo_called_all: 'MOS LQO Called (B)',
			mos_lqo_called_perc95_all: 'MOS LQO Called (B) %95',
			mos_lqo_called_perc99_all: 'MOS LQO Called (B) %99',
			packets_lost_all: 'Packet loss',
			packets_lost_perc95_all: 'Packet loss %95',
			packets_lost_perc99_all: 'Packet loss %99',
			jitter_all: 'Jitter',
			jitter_perc95_all: 'Jitter %95',
			jitter_perc99_all: 'Jitter %99',
			delay_all: 'PDV',
			delay_perc95_all: 'PDV %95',
			delay_perc99_all: 'PDV %99',
			pdd_all: 'PDD',
			pdd_perc95_all: 'PDD %95',
			pdd_perc99_all: 'PDD %99',
			cps_max: 'CPS max',
			cps_avg: 'CPS avg',
			rtcp_maxfr: 'RTCP FL max',
			rtcp_maxfr_perc95_all: 'RTCP FL max %95',
			rtcp_maxfr_perc99_all: 'RTCP FL max %99',
			rtcp_avgfr: 'RTCP FL avg',
			rtcp_avgfr_perc95_all: 'RTCP FL avg %95',
			rtcp_avgfr_perc99_all: 'RTCP FL avg %99',
			rtcp_maxjitter: 'RTCP jitter max',
			rtcp_maxjitter_perc95_all: 'RTCP jitter max %95',
			rtcp_maxjitter_perc99_all: 'RTCP jitter max %99',
			rtcp_avgjitter: 'RTCP jitter avg',
			rtcp_avgjitter_perc95_all: 'RTCP jitter avg %95',
			rtcp_avgjitter_perc99_all: 'RTCP jitter avg %99',
			rtcp_maxrtd: 'RTCP Rtd max',
			rtcp_maxrtd_perc95_all: 'RTCP Rtd max %95',
			rtcp_maxrtd_perc99_all: 'RTCP Rtd max %99',
			rtcp_avgrtd: 'RTCP Rtd avg',
			rtcp_avgrtd_perc95_all: 'RTCP Rtd avg %95',
			rtcp_avgrtd_perc99_all: 'RTCP Rtd avg %99',
			silence_all: 'Silence',
			silence_perc95_all: 'Silence %95',
			silence_perc99_all: 'Silence %99',
			silence_end_all: 'Last Silence',
			silence_end_perc95_all: 'Last Silence %95',
			silence_end_perc99_all: 'Last Silence %99',
			clipping_all: 'Clipped Frames',
			clipping_perc95_all: 'Clipped Frames %95',
			clipping_perc99_all: 'Clipped Frames %99',
			price_customer: 'Price Customer',
			price_operator: 'Price Operator',
			price_difference: 'Price Difference',
			counter: 'counter',
			mos_f1_min: 'mos f1 min',
			mos_f1_avg: 'mos f1 avg',
			mos_f2_min: 'mos f2 min',
			mos_f2_avg: 'mos f2 avg',
			mos_ad_min: 'mos adapt min',
			mos_ad_avg: 'mos adapt avg',
			jitter_max: 'jitter max',
			jitter_avg: 'jitter avg',
			loss_max: 'loss max',
			loss_avg: 'loss avg',
			min: 'min', 
			max: 'max', 
			avg: 'avg', 
			perc95: 'percentile 95',  
			perc99: 'percentile 99', 
			numericColumn: 'numeric column',
			chartWidget: 'chart widget',
			hideMenu: 'hide menu',
			passiveCharts: 'passive charts',
			chartCacheSettings: 'chart aggregation/rrd settings (beta version)',
			arrangeDashboardsInTree: 'manage dashboards',
			linkToPngViaApi: 'link to png',
			linkToCsvViaApi: 'link to csv'
		},
		combomenu: {
			bySourceIP: 'by source IP',
			byDestinationIP: 'by destination IP',
			byCaller: 'by caller',
			byCalled: 'by called',
			typePanel_chart: 'CDR charts',
			typePanel_chart_message: 'Message charts',
			typePanel_chart_sip_msg: 'Opt., Subsc., Notify charts',
			typePanel_chart_3d_rtp_stat: 'RTP stat 3D charts',
			typePanel_grid_rtp_stat: 'RTP stat grid',
			typePanel_sip_response_pie_chart: 'CDR SIP responses (pie chart)',
			typePanel_sip_response_pie_chart_message: 'IM SIP responses (pie chart)',
			typePanel_top_ip_address_chart: 'Top CDR IP addresses',
			typePanel_top_ip_address_chart_message: 'Top Messages IP addresses',
			typePanel_asr_acd_mos_by_sip_ip_grid: 'custom CDR grid - by SIP IP',
			typePanel_asr_acd_mos_by_rtp_ip_grid: 'custom CDR grid - by RTP IP',
			typePanel_asr_acd_mos_by_callerd_grid: 'custom CDR grid - by number',
			typePanel_asr_acd_mos_by_ua_grid: 'custom CDR grid - by user agent',
			typePanel_asr_acd_mos_by_country_by_sip_ip_grid: 'custom CDR grid - by country (by SIP IP)',
			typePanel_asr_acd_mos_by_country_by_number_grid: 'custom CDR grid - by country (by number)',
			typePanel_asr_acd_mos_by_sip_response_grid: 'custom CDR grid - by SIP response',
			typePanel_count_by_sip_ip_grid_message: 'custom Messages grid - by SIP IP',
			typePanel_count_by_callerd_grid_message: 'custom Messages grid - by number',
			typePanel_count_by_country_by_sip_ip_grid_message: 'custom Messages grid - by country (by SIP IP)',
			typePanel_count_by_country_by_number_grid_message: 'custom Messages grid - by country (by number)',
			typePanel_count_by_sip_response_grid_message: 'custom Messages grid - by SIP response',
			typePanel_sniffer_stat: 'sniffer statistics',
			typePanel_sniffer_rrd: 'sniffer charts',
			typePanel_collectd_rrd: 'collectd charts',
			typePanel_active_calls_map: 'active calls map',
			typePanel_active_calls_chart: 'active calls chart',
			ascending: 'ascending',
			descending: 'descending',
			active_calls_chart_by_sensors: 'calls by sensors',
			active_calls_chart_by_src_ip: 'calls by top source ip',
			active_calls_chart_by_dst_ip: 'calls by top destination ip'
		},
		title: {
			selectNewPanelType: 'Select new panel type',
			saveTemplate: 'Save dashboard',
			editTemplate: 'Edit dashboard',
			duplicateTemplate: 'Duplicate dashboard',
			msgDuplicationName: 'duplication name',
			msgDeleteTemplate: 'delete dashboard',
			panelSetup: 'panel setup',
			tabFilter: 'filters',
			tabFilterCommon: 'filters - common',
			tabFilterRtp: 'filters - RTP',
			tabFilterDscp: 'filters - DSCP',
			tabFilterFiltersComb: 'filters - combination',
			tabBaseSetting: 'base setting',
			newDashboard: 'New Dashboard',
			viewUrl: 'Show current dashboard / view URL',
			filters: 'filters',
			chartParameters: 'chart parameters',
			setCustomTimeInterval: 'Custom time interval',
			linkToPngViaApi: 'link to png (via api)',
			linkToCsvViaApi: 'link to csv (via api)',
			chartCacheSettings: 'chart aggregation/rrd settings (beta version)',
			arrangeDashboardsInTree: 'manage dashboards'
		},
		text: {
			questionClosePanel: 'close panel',
			msgDuplicationName: 'Name is used. Overwrite?',
			msgDeleteTemplate: 'delete current dashboard?',
			msgRemoveAllPanels: 'remove all panels?',
			restartSensor: 'Restart sensor {0}?',
			upgradeSensor: 'Upgrade sensor {0} to version {1}?',
			upgradeSensors: 'Upgrade sensors {0} to version {1}?',
			bySourceIP_short: 'by source IP',
			byDestinationIP_short: 'by dest. IP',
			byCaller: 'by caller',
			byCalled: 'by called',
			changelog: 'changelog',
			waitForFirstState: 'wait for first state',
			betaVersions: 'beta versions',
			newPanel: 'New panel',
			formIsNotCompleted_checkAllTabs: 'Form is not completed. Check all tabs!',
			noFreeRegionForNewPanel: 'Unpin and resize your panels to make free room for new panel!',
			useUserHash: 'use user_hash',
			useUserAndPassword: 'use user and password',
			doNotForgetAddPasswordToLink: 'do not forget add password to link',
			agregationShort: 'agreg',
			youAreNotAuthorizedToOperation: 'you are not authorized to perform the requested operation',
			questionForUseOnlyCache: 'The calculation of the chart takes too long. Do you want to use the cache?',
			termsConfirm: 'Enabling this feature (which is in beta version now) will create aggregated data for this chart which will allow instant render for any selected time range interval - especially if you need to see data for 30 days or even for whole year (we use aggregation intervals for day / week / month - similar to RRD). You can enable this only for some charts or enable it for all charts in all dashboards (in dashboard main toolbar click on wrench icon). Calculations are running on background - default number of parallel processes are 2 which can be changed in dashboard settings (in main dashboard toolbar the wrench icon). Use this feature wisely - if you do not need to see the data often take in mind that enabling the aggregation will continuously consume some CPU resources.<br>' + 
				      '<br>' +
				      'Please note that this feature is still in BETA and in case of problem we would need SSH access to the server to properply troubleshoot it.<br>' +
				      '<br>' +
				      'Do you want to turn it on?',
			neverShowAgain: 'never show again',
			disableChartCacheForPanelQuestion: 'Disable chart aggregation for the selected panel?',
			enableChartCacheForPanelQuestion: 'Enable chart aggregation for the selected panel?',
			agregationIsTemporarilyDisabledInSetting: 'Aggregation of the chart is temporarily suspended in the chart aggregation setting.',
			agregationIsTemporarilyAutoDisabled: 'Aggregation of the chart is temporarily suspended.'
		},
		tooltip: {
			pause: 'pause',
			resume: 'paused - click to resume',
			refresh: 'refresh',
			dock: 'dock',
			undock: 'undock',
			panelSetup: 'panel setup',
			close: 'close panel',
			setInterval: 'change interval',
			restart: 'restart',
			upgrade: 'upgrade',
			setBySourceOrDestinationIP: 'set by source or by destination IP',
			setByCallerOrCalledSide: 'set by caller or called side',
			setTypeSensorRdd: 'set type graph',
			setTypeCollectdGraphRdd: 'set type graph',
			loadCameraParametersFromChart: 'load camera parameters from chart',
			setCameraParametersToPanelSetup: 'set camera parameters to panel setup',
			linkToPngCsvViaApi: 'link to png / csv (via api)',
			exportToCsv: 'export to csv',
			switchUseOnlyCache: 'on / off use aggregation/rrd (beta version)',
			selectAgregationMethodAndChart: 'select agregation method and chart widget',
			prevInterval: 'previous interval',
			nextInterval: 'next interval'
		}
	},
	alerts_daily_reports: {
		grid: {
			subject_alert: 'alert',
			subject_daily_report: 'daily report'
		},
		column: {
			last_run_at: 'Last run at',
			concurrent_calls_limit_local: 'calls limit - local',
			concurrent_calls_limit_international: 'calls limit - intern.',
			concurrent_calls_limit: 'calls limit - both',
			alert_descr: 'alert',
			report_descr: 'report',
			send_time: 'started at',
			subject: 'subject',
			last_cdr_id: 'last cdr',
			send_email: 'email',
			at_every: 'At / Every',
			day: 'day',
			timezone: 'Timezone',
			use_cache: 'use aggregation/rrd'
		},
		field: {
			descr: 'Description',
			alert_type: 'Alert Type',
			report_type: 'Report Type',
			data_table: 'Data Table',
			enable: 'Enabled',
			every_interval_offset_min: 'interval offset',
			at_day_of_week: 'day of week',
			at_hour_of_day_from: 'hour of day',
			at_day_of_month: 'day of month',
			select_sensors: 'select sensors',
			agregation_sensors: 'aggreg.',
			enable_hyperlinks: 'Enable hyperlinks',
			add_note2email: 'Add Note into email',
			send_if: 'Send alert if',
			send_if_report: 'Send report if',
			every: 'Every',
			at: 'At',
			maximum_oldest_cdr_hour: 'Max. oldest cdr',
			mos_lt: 'MOS <',
			mos_xr_avg_lt: 'MOS XR avg <',
			mos_xr_min_lt: 'MOS XR min <',
			mos_silence_avg_lt: 'MOS Silence avg <',
			mos_silence_min_lt: 'MOS Silence min <',
			mos_lqo_caller_lt: 'MOS LQO Caller <',
			mos_lqo_called_lt: 'MOS LQO Called <',
			packets_lost_perc_gt: 'Packet Loss >',
			jitter_gt: 'Jitter >',
			delay_limit_ge: 'PDV >',
			delay_count_gt: 'PDV count >',
			silence_gt: 'Silence >',
			silence_end_gt: 'Last silence >',
			clipping_gt: 'Clipping >',
			cb_rtp_ip_groups_id: 'RTP IP Group',
			rtp_ip: 'RTP IP Addresses',
			duration_gt: 'Duration [s] >',
			pdd_gt: 'PDD [s] >',
			sens_age_last_cdr_gt: 'last cdr age [s] >',
			sens_packet_loss_gt: '#packet loss >',
			sens_sqlqueue_size_gt: 'sqlsize >',
			sens_memory_res_mb_gt: 'mem res [MB] >',
			sens_calls_gt: 'calls >',
			sens_uptime_decrease: 'uptime decrease',
			sens_select_sensors: 'select sensors',
			sens_always_send_status: 'always send status email',
			cdr_report_in_attachment: 'cdr report in attachment',
			cdr_report_max_lines_in_body: 'max lines in body',
			cdr_recap_report_in_attachment: 'cdr summary in attachment',
			report_in_attachment: 'report in attachment',
			summary_in_subject: 'summary in subject',
			one_way: 'One way',
			without_stream: 'Missing RTP',
			interrupted_call: 'Interrupted call',
			interrupted_call_time_tolerance: 'time tolerance',
			last_sip_response_num: 'SIP response',
			reason_type: 'Type reason',
			reason_filter: 'Reason filter',
			occurences_gt: 'Incidents >',
			occurences_perc_from_all: 'from all',
			cdr_gt: '# cdr >',
			time_without_call_minutes: 'minutes without call >',
			time_without_call_only_connected: 'only connected',
			cps_gt: 'CPS >',
			dscp_caller_sip: 'Caller SIP DSCP',
			dscp_called_sip: 'Called SIP DSCP',
			dscp_caller_rtp: 'Caller RTP DSCP',
			dscp_called_rtp: 'Called RTP DSCP',
			dscp_cond_or: 'Use OR condition',
			asr_lt: 'ASR <',
			ner_lt: 'NER <',
			acd_lt: 'ACD <',
			rrd_avg_ge: 'RRD avg >=',
			ipe_cdr_custom_headers_id: 'custom header',
			ipe_error: 'error code',
			call_timedout_absolute: 'absolute time out',
			call_timedout_bye: 'time out on post BYE',
			call_timedout_rtp: 'timeout on RTP',
			call_timedout_oneway: 'timeout on one way',
			concurrent_calls_minutes: 'Check interval length',
			include_caller_numbers: 'include caller numbers',
			exclude_caller_numbers: 'exclude caller numbers',
			include_called_numbers: 'include called numbers',
			exclude_called_numbers: 'exclude called numbers',
			include_src_ip: 'include source IP addresses',
			exclude_src_ip: 'exclude source IP addresses',
			include_dst_ip: 'include destination IP addresses',
			exclude_dst_ip: 'exclude destination IP addresses',
			include_caller_domains: 'include caller domains',
			exclude_caller_domains: 'exclude caller domains',
			concurrent_calls_limit: 'Concurrent calls limit',
			local: 'local',
			international: 'international',
			both: 'both',
			fraud_by_ip: 'By IP',
			fraud_rcc_by: 'By',
			fraud_rc_by: 'By',
			fraud_type_change_location: 'Change type',
			fraud_use_domain: 'Distinguish domains',
			fraud_filter_domain: 'Domains filter',
			exclude_country: 'Excluded country from alert',
			destination_country: 'Destination country/continent',
			prefixes_called_numbers: 'Called number prefixes',
			time_period_rules: 'Time period rules',
			reg_filters: 'Filters',
			next_reg_filters: 'Next filters',
			fraud_interval_length: 'Interval',
			fraud_interval_limit: 'Limit',
			fraud_filter_international_only: 'Only international calls',
			fraud_register_only_with_response: 'with response',
			ip: 'IP Addresses',
			number: 'Numbers',
			domain: 'Domains',
			ua: 'User Agents',
			email: 'E-mails',
			note: 'Note',
			only_connected: 'only connected',
			external_script: 'external script',
			external_script_parameters_via_tmp_file: 'script parameters via temporary files',
			external_script_vars: 'variables exported into script',
			suppress_repeating_alerts: 'suppress repeating alerts',
			alert_once_per_hours: 'once per hours',
			international_prefixes_configuration: 'international prefixes configuration',
			only_by: 'only by',
			fraud_bill_by_ip: 'IP addresses',
			fraud_bill_by_number: 'numbers',
			fraud_bill_by_domain: 'domains',
			quotas: 'quotas',
			fraud_bill_quota_hour: 'hour',
			fraud_bill_quota_day: 'day',
			fraud_bill_quota_week: 'week',
			fraud_bill_quota_month: 'month',
			fraud_bill_quota_summary: 'summary',
			fraud_bill_limit: 'limit',
			fraud_store_pcaps: 'store pcaps',
			fraud_store_pcaps_to_path: 'to path',
			reg_unregister_time_sec_ge: 'Unregistered time >=',
			reg_failed_occurences_ge: 'Failed occurences >=',
			reg_ua: 'User agents',
			reg_ua_neg: 'NOT condition for user agents',
			reg_register_time_sec_le: 'Register time <=',
			reg_interval_limit: 'Limit',
			reg_interval_length_sec: 'Interval',
			reg_rrd_avg_ms_ge: 'RRD avg >=',
			reg_list_type: 'List type',
			reg_ok_count_min: 'Number of active registrations interval - min',
			reg_ok_count_min_column: 'ok registration - min',
			reg_ok_count_max: 'max',
			reg_ok_count_max_column: 'ok registration - max',
			reg_ok_count_negative_condition: 'negative condition (alert will be sent if the number of registrations is in the interval)',
			reg_ok_count_negative_condition_column: 'negative condition',
			timeperiod: 'Time period',
			report_last_days: 'Last days',
			report_whole_month: 'Whole month',
			cb_pmd_proxy_ip_groups_id: 'Proxy IP Group',
			pmd_proxy_ip: 'Proxy IP',
			pmd_mos_border_1: 'MOS <',
			pmd_mos_border_2: 'MOS >',
			pmd_cdr_custom_headers_id: 'custom header',
			pmd_detail: 'detail',
			cdr_sum_type: 'Summary type',
			columns: 'columns',
			cdr_sum_sort_by: 'sort by',
			cdr_sum_sort_dir: 'sort direction',
			cdr_sum_max_rows: 'maximum rows',
			cc_interval_type: 'interval',
			cc_interval_agregation: 'join intervals',
			cc_interval_count: 'count',
			cc_interval_days_of_week: 'days',
			chart_enable_shadow: 'Enable shadow in charts',
			send_pdf: 'Send PDF',
			chart_pdf_image_format: 'Charts format in PDF',
			pdf_page_orientation: 'Landscape orientation',
			description: 'description',
			enabled: 'enabled',
			previous_period: 'previous period',
			chart_width: 'chart width',
			chart_height: 'chart height',
			delete_all: 'all',
			delete_to_date: 'to date (<=)',
			ip_condition_12: 'condition between source / destination',
			fraud_number_condition_12: 'condition between caller / called',
			fraud_ip_condition_12: 'condition between source / destination',
			custom_columns_enable: 'custom columns',
			custom_columns_after_std: 'after default columns',
			timezone: 'Timezone',
			use_cache: 'use aggregation/rrd (beta version)',
			sip_msg_type: 'SIP message types',
			options: 'options',
			subscribe: 'subscribe',
			notify: 'notify',
			sip_msg_group_by_ip: 'group by IP',
			sip_msg_group_by_response_number: 'group by response number',
			sip_msg_qualify_default: 'use default qualify limit',
			sip_msg_qualify_limit: 'qualify limit [ms]',
			sip_msg_ok_responses: 'ok responses',
			sip_msg_data_source: 'data source',
			owner_uid: 'owner',
			'private': 'private',
			use_user_restriction: 'use user restriction',
			read_permission: 'read permission',
			write_permission: 'write permission',
			users: 'users',
			groups: 'groups'
		},
		field_custom_columns: {
			top: 'top',
			bottom: 'bottom',
			field: 'field',
			header: 'header'
		},
		field_help: {
			descr: 'This description will appear in email subject',
			send_if: 'criteria match - send alert / report only if criteria and filters matches<br>' +
				 'no criteria match - send alert / report only if criteria and filters matches no data during period<br>' +
				 'both - send alert / report if criteria and filters matches and alsi if there is no data during the period',
			maximum_oldest_cdr_hour: 'Alert rule takes all cdr since last alert match but limited to maximum age of a cdr by this parameter. Please take in mind that “since last alert match” is not the same as “since last alert run”.  If you setup alert rule where you would like to be alerted once 5% of CDR meets some criteria and the alert runs every 5 minutes it does not mean that CDR is automatically taken only from the last 5 minutes period but since last posotive alert match and limited by this parameter.',
			mos_lt: 'Send alert / report if MOS is less than this',
			mos_lqo_caller_lt: 'Send alert / report if MOS LQO Caller is less than this',
			mos_lqo_called_lt: 'Send alert / report if MOS LQO Called is less than this',
			packets_lost_perc_gt: 'Send alert / report if packet loss in % is greater than this',
			jitter_gt: 'Send alert / report if jitter is greater than this',
			delay_limit_ge: 'Send alert / report if choosen delays is greater than count',
			sens_always_send_status: 'Send alert even if criteria do not match showing that sensors are ok.',
			last_sip_response_num: 'If you want to filter all 4XX responses put here number 4. If you want to filter specific responses put here 481 for example. Use !200 for all CDRs except 200OK.',
			occurences_gt: 'Send alert only if this rule matches more than N times',
			occurences_gt_perc_cond: 'logical condition between count of incidents and percentage',
			occurences_perc_gt: 'Send alert only if this rule matches in more than N percents',
			occurences_perc_from_all: 'chooses percentage equation<br>' +
						  'enabled - quotient of all CDRs and common filter subtabs including incidents rules<br>' +
						  'disabled - quotient of common filter subtabs and common filter subtabs including incidents rules' ,
			call_timedout_absolute: 'If a call is released from memory due to absolute timeout (absolute_timeout is the sensor configuration option) this alert is triggered.',
			call_timedout_bye: 'After receiving BYE message the sensor still accepts RTP or SIP which keeps the call in memory until 20 minute timeout occurs. It can happen that some device can send RTP stream indefinitely (stuck / bug) which is one of the case to trigger this alert.',
			call_timedout_rtp: 'Trigger alert when the call is removed from memory due to rtptimeout option.',
			call_timedout_oneway: 'Trigger alert when sniffer detects call with one-way SIP signaliization. This can happen when the sniffer do not see all the traffic or the receiver does not respond at all.',
			fraud_register_only_with_response: 'Inspect REGISTER flood only if there is any response to REGISTER. Purpose of this option is to not be alerted for REGISTER messages which you firewalled but the ' + applName + ' still sees it but without response.',
			ip: 'List of IP addresses or network ranges delimited with space or , or ; or newline. Examples: 192.168.0.0/24,10.0.0.10',
			number: 'List of Tel. number prefixes which match source or destination. List is delimited with space or , or ; or newline.',
			email: 'List of emails to which this alert will be sended. List is delimited with space or , or ; or newline. Can be omitted if an external script is entered.',
			report_last_days: 'Report will include data for last X days. Default is one day.',
			every_interval_offset_min: 'This option shifts the end of the timeline from now() to now() - X minutes. This is useful when you do not want to see downward trend due to the fact that there are still ongoing calls which is not yet in the chart. It is applied to all graphs in the report. It must be shorter then \'every\' interval.',
			cc_interval_agregation: 'For example if you set 8 and hour interval the report table will aggregate maximum concurrent calls per 8 hour intervals (0-8, 8-16, 16-24). The same is for minute interval - for example number 30 will show maximum calls for every 30 minutes.',
			custom_columns_enable: 'Option to enable the definition of optional columns.',
			custom_columns_after_std: 'When checked, optional columns will be placed behind the standard columns. When unchecked, optional columns will replace standard columns.'
		},
		combomenu: {
			min: 'min',
			max: 'max',
			caller: 'caller',
			called: 'called',
			by_rtp_ip: 'RTP IP',
			SIP: 'SIP',
			Q850 : 'Q.850',
			sip_response: 'SIP response',
			sip_caller_ip: 'SIP caller IP',
			sip_called_ip: 'SIP called IP',
			caller_number: 'Caller number',
			called_number: 'Called number',
			ua_caller: 'User agent - caller',
			ua_called: 'User agent - called',
			country_sip_caller_ip: 'Country by SIP caller IP',
			country_sip_called_ip: 'Country by SIP called IP',
			country_caller_number: 'Country by caller number',
			country_called_number: 'Country by called number',
			number_of_calls: 'number of calls',
			by_minutes: 'by minutes',
			by_hours: 'by hours',
			by_days: 'by days',
			cdr: 'cdr',
			message: 'message',
			source: 'source',
			destination: 'destination',
			both: 'both',
			source_ip: 'source ip',
			destination_ip: 'destination ip',
			source_number: 'source number',
			rtp_stream_ip: 'rtp stream',
			rtp_stream_ip_group: 'rtp stream group',
			summary: 'summary',
			cc_interval_minute: 'minute',
			cc_interval_hour: 'hour',
			cc_interval_day: 'day',
			operator_and: 'AND',
			operator_or: 'OR',
			operator_both_directions: 'BOTH DIRECTIONS',
			current: 'current',
			previous: 'previous',
			active: 'active',
			stored: 'stored',
			src_ip: 'source',
			dst_ip: 'destination',
			no: 'no',
			yes: 'yes',
			yes_first: 'yes - first'
		},
		combomenu_help: {
			operator_and_number: 'caller number = caller condition AND called number = called condition',
			operator_or_number: 'caller number = caller condition OR called number = called condition',
			operator_both_directions_number: '(caller number = caller condition AND called number = called condition) OR<br>' + 
							 '(caller number = called condition AND called number = caller condition)',
			operator_and_ip: 'source IP = source condition AND destination IP = destination condition',
			operator_or_ip: 'source IP = source condition OR destination IP = destination condition',
			operator_both_directions_ip: '(source IP = source condition AND destination IP = destination condition) OR<br>' + 
						     '(source IP = destination condition AND destination IP = source condition)',
			active: '',
			stored: ''
		},
		combobox_emptyinfo: {
			cdr_custom_headers_id: 'you have no custom header defined'
		},
		button: {
			preview_alert: 'preview alert',
			preview_report: 'preview report',
			send_alert: 'send alert',
			send_report: 'send report',
			delete_all: 'Delete all',
			preview_chart: 'preview chart',
			'delete': 'delete'
		},
		button_tooltip: {
			preview_alert_disabled_for_no_criteria_match: 'preview for "no criteria match" is disabled',
			send_alert_disabled_for_no_criteria_match: 'send for "no criteria match" is disabled'
		},
		menu: {
			normal_preview: 'normal preview',
			test_preview: 'test preview',
			cdr: 'CDR',
			messages: 'MESSAGES',
			sip_msg: 'Options / Subscribe / Notify'
		},
		tab: {
			basicData: 'basic data',
			filter: 'filter',
			filterCommon: 'filter - common',
			filterRtp: 'filter - RTP',
			filterDscp: 'filter - DSCP',
			filterFiltersComb: 'filter - combination',
			charts: 'charts',
			otherSettings: 'other settings'
		},
		text: {
			infoDeleteSentAlerts: 'will be deleted {0} sent alerts',
			infoDeleteSentReports: 'will be deleted {0} sent reports',
			alertSent: 'Alert sent',
			reportSent: 'Report sent',
			deleteSentAlerts: 'delete sent alerts',
			deleteSentAlertsQuestion: 'Delete sent alerts?',
			deleteAllSentAlertsQuestion: 'Delete all sent alerts?',
			deleteToTimeSentAlertsQuestion: 'Delete alerts to time {0}?',
			deleteSentReports: 'delete sent reports',
			deleteSentReportsQuestion: 'Delete sent reports?',
			deleteAllSentReportsQuestion: 'Delete all sent reports?',
			deleteToTimeSentReportsQuestion: 'Delete reports to time {0}?',
			at: 'at',
			every: 'every'
		},
		title: {
			alerts: 'Email Alerts',
			sent_alerts: 'Sent Alerts',
			daily_reports: 'Daily Email Reports',
			sent_daily_reports: 'Sent Daily Reports',
			delete_sent_alerts: 'Delete sent alerts',
			delete_sent_reports: 'Delete sent reports',
			incidentsRules: 'incidents rules',
			addCustomColumn: 'add custom column',
			editCustomColumn: 'edit custom column',
			userRestrictions: 'user restrictions'
		}
	},
	daily_reports: {
		combomenu: {
			min: 'min',
			max: 'max',
			caller: 'caller',
			called: 'called',
			by_rtp_ip: 'RTP IP'
		}
	},
	user_admin: {
		column: {
			time: 'Time',
			type: 'Type',
			bad_login_reason: 'Subtype',
			addr: 'Remote Address',
			user_agent: 'User Agent',
			reason: 'Reason',
			repeat_counter: 'Repetetion',
			custom_header: 'Custom header'
		},
		field: {
			username: 'Login name',
			username_email: 'Login name (email)',
			name: 'Name',
			password: 'Password',
			email: 'E-mail',
			id_group: 'Group',
			group_name: 'Group',
			ip: 'IP addresses',
			number: 'Tel. numbers',
			domain: 'Domains',
			vlan: 'Vlans',
			cdr_custom_headers: 'CDR custom headers',
			message_custom_headers: 'Message custom headers',
			ip_number_domain_or: 'OR condition between IP addr., Tel. numbers, Domains',
			note: 'Note',
			is_admin: 'Is administrator',
			req_2fa: '2FA auth',
			can_cdr: 'Enable CDR',
			can_write_cdr: 'Can delete CDR',
			can_play_audio: 'Can play CDR',
			can_download_audio: 'Can download WAV/OGG',
			can_listen_active_call: 'Can listen active call',
			can_show_fax: 'Can show fax',
			can_pcap: 'Can download PCAP',
			can_upload_pcap: 'Can upload PCAP',
			can_messages: 'Enable Messages',
			can_view_content_message: 'Can view content message',
			can_view_message_url: 'Can view message URL',
			no_rtp: 'Remove RTP from PCAP',
			simple_cdr: 'Simple CDR',
			hide_cdr_groups: 'Hide CDR / Messages groups',
			hide_cdr_groups_cdr_only: 'Hide CDR groups',
			can_graphs: 'Can graphs',
			can_tracker: 'Enable Tracker',
			can_activecalls: 'Enable active calls',
			can_activecalls_map: 'Enable active calls map',
			can_register: 'Enable register',
			can_sip_msg: 'Enable sip opt., subsc., notify',
			can_livesniffer: 'Enable live sniffer',
			can_dashboard: 'Enable dashboard',
			dashboard_read_only: 'Read only dashboard',
			show_only_connected_calls: 'Show only connected calls',
			can_capture_rules: 'Enable capture rules',
			crules_remove_expire_time: 'Capture rules autoremove interval',
			can_audit: 'Enable audit',
			can_alerts_edit: 'Enable edit alerts',
			create_only_private_alerts: 'Create only private alerts',
			can_alerts_show_sent: 'Enable show sent alerts',
			can_reports_edit: 'Enable edit reports',
			create_only_private_reports: 'Create only private reports',
			can_reports_show_sent: 'Enable show sent reports',
			can_report_functions: 'Enable report functions',
			can_cdr_share_local_public: 'Enable local public share',
			can_cdr_share_local_private: 'Enable local private share',
			can_cdr_share_voipmonitor_org: 'Enable ' + appShareUrl,
			hide_license_information: 'Hide license on homepage',
			can_ipacc: 'Enable IP account',
			can_mtr: 'Enable MTR',
			can_network: 'Enable network settings',
			can_edit_codebooks: 'Enable edit groups',
			can_show_sql_query: 'Enable show SQL query',
			can_sensors_operations: 'Enable sensors operations',
			can_edit_all_templates: 'Can edit all templates',
			can_delete_all_templates: 'Can delete all templates',
			hide_change_password: 'Hide change user auth',
			hide_user_configuration: 'Hide user configuration',
			password_expired: 'Password is expired',
			can_svg_paint: 'Enable Network map',
			can_3d_rtp_charts: 'Enable 3D RTP charts',
			uc_color_theme_shift: 'HSV',
			uc_color_theme_shift_h: 'H',
			uc_color_theme_shift_s: 'S+',
			uc_color_theme_shift_v: 'V+',
			uc_font_main_menu: 'main menu',
			uc_enable_confirm_before_unload: 'Enable confirm before close / unload',
			uc_enable_dns_cdr: 'Enable DNS IP lookup in CDR',
			uc_enable_dns_message: 'Enable DNS IP lookup in Messages',
			uc_enable_dns_ss7: 'Enable DNS IP lookup in SS7',
			uc_enable_flags_cdr_number: 'Enable flags in CDR / number',
			uc_enable_flags_cdr_ip: 'Enable flags in CDR / IP',
			uc_enable_flags_message_number: 'Enable flags in Messages / number',
			uc_enable_flags_message_ip: 'Enable flags in Messages / IP',
			uc_enable_flags_ss7_number: 'Enable flags in SS7 / number',
			uc_enable_flags_ss7_ip: 'Enable flags in SS7 / IP',
			uc_csv_field_separator: 'CSV field separator',
			colorThemeShift: 'color theme shift',
			fonts: 'fonts',
			sensor_name: 'sensor',
			sensor_id: 'sensor',
			description: 'description',
			at: 'at',
			user_name: 'user',
			activity: 'activity type',
			reason: 'reason',
			dest_number: 'Dest.number',
			allow_change_settings: 'Allow change settings',
			profile_id: 'Profile',
			profile_name: 'Profile',
			auto_popup: 'Auto popup',
			show_ip: 'Show IP',
			popup_on: 'Popup on',
			non_numeric_caller_id: 'Non numeric destination number',
			regex_calling_number: 'Regex source number',
			src_ip_whitelist: 'Include source IP',
			src_ip_blacklist: 'Exclude source IP',
			app_launch: 'App launch',
			app_launch_args_or_url: 'App launch arguments / URL',
			status_line: 'Status line',
			popup_title: 'Popup title',
			Description: 'Description',
			reason: 'Reason',
			blocked: 'Blocked',
			blocked_reason: 'Blocked reason',
			max_bad_login_attempt: 'Max bad login attempt',
			password_expiration_days: 'Password expiration',
			enable_login_ip: 'Enable remote addresses',
			password_min_length: 'Minimum password length',
			password_min_small_letters: 'Minimum small letters',
			password_min_large_letters: 'Minimum large letters',
			password_min_numbers: 'Minimum numbers',
			password_min_other_chars: 'Minimum other characters',
			password_rules: 'password rules',
			config_grid: 'columns of grid - width, order',
			delete2fa_sec: '2FA secret state',
			keep2fa_sec: 'Keep it',
			remove2fa_sec: 'Remove current secret',
			missing_sec: '2FA secret state',
			req_2fa: 'Require 2FA authentication',
			file: 'File',
			deleteOld: 'Delete old'
		},
		field_help: {
			username: 'Login name',
			ip: 'Restrict user to view only CDR / active calls which matches with IP address / network. Each IP has to be delimited with [enter]. Format is A.B.C.D/N where /N is optional and N is network mask from 0 to 32',
			number: 'Restrict user to view only CDR / active calls which matches with telephone number. Each number has to be delimited with [enter]. You can use MySQL syntax LIKE. For example "222%" will restrict all numbers which starts with 222.',
			domain: 'Restrict user to view only CDR / active calls which matches with domain. Each domain has to be delimited with [enter]. You can use MySQL syntax LIKE - for example domain%.',
			vlan: 'Restrict user to view only CDR / active calls which matches with vlan ID. Each vlan has to be delimited with [enter].',
			cdr_custom_headers: 'Restrict user to view only CDR / active calls which matches with custom headers content',
			message_custom_headers: 'Restrict user to view only Messages which matches with custom headers content',
			is_admin: 'Administrator can create and modify users.',
			req_2fa: 'Require 2FA for authentication.',
			can_play_audio: 'Can play CDR',
			can_download_audio: 'Can download WAV/OGG from CDR',
			can_pcap: 'Can download PCAP file',
			crules_remove_expire_time: 'Define maximum interval (in hours) for the expire time setting in the capture rules. If set then the setting of the capture rules expire time is required.',
			no_rtp_text: 'Remove RTP packets from pcap file on download. Usefull for not allowing users to listen to calls.',
			simple_cdr: 'Show only simple CDR layout',
			delete2fa_sec: 'If you select \'remove\' then actual user\'s 2FA secret will be deleted. The user will have to create new secret in the first/next login if 2FA authentication is required.',
			req_2fa: 'This enables user\'s 2FA authentication. The user will have to create new secret in the first/next login.'
		},
		grid: {
			subject: 'user',
			subject_user: 'user',
			subject_group: 'group',
			subject_sensor: 'sensor',
			subject_profile: 'profile'
		},
		title: {
			enabledSensorsTab: 'enabled sensors',
			historyTab: 'history',
			users: 'Users',
			groups: 'Groups',
			relatedCdrTab: 'related CDR',
			filterQueryTab: 'filter query',
			screen_popup_users: 'Easy Caller ID users',
			screenPopupUsersTab: 'users',
			screenPopupProfileTab: 'profiles',
			blockUser: 'Block user',
			blockGroup: 'Blok group',
			settings: 'Settings',
			commonTab: 'common',
			colorFontTab: 'color, font',
			resetConfiguration: 'reset configuration',
			basic_data: 'basic data',
			secure_users: 'secure users',
			users_restriction: 'users restriction',
			enabled_sensors: 'enabled sensors',
			importUserRestrictions: 'Import user restrictions'
		},
		text: {
			infoDeleteAuditLog: 'will be deleted _COUNT_ records from audit log',
			duplicationUser: 'duplication user',
			simpleCdrWarning: 'This option hides many informations in CDR section making this section more likely call recorder instead of diagnostic tool - are you sure you want that?',
			queryBeforeReset: 'After performing the reset operation, the application will be reloaded. Continue?'
		},
		menu: {
			tools: 'tools',
			exportUserRestrictions: 'export user restrictions',
			importUserRestrictions: 'import user restrictions'
		},
		tooltip: {
			blockUser: 'block user',
			blockGroup: 'blok group',
			unblockUser: 'unblock user',
			unblockGroup: 'unblock group',
			groupIsBlocked: 'user group is blocked'
		},
		enumdata: {
			login: 'login',
			relogin: 'relogin',
			bad_login: 'bad login',
			bad_relogin: 'bad relogin',
			password_change: 'password change',
			secret2fa_change: 'secret 2fa change',
			block: 'block',
			unblock: 'unblock',
			none: '',
			bad_password: 'bad pasword',
			blocked_address: 'blocked address',
			blocked_account: 'blocked acount',
			bad_2facode: 'bad 2FA code',
			left: 'left',
			right: 'right',
			disable: 'disable'
		},
		button: {
			reset: 'reset',
			selectFile: 'Select File...'
		},
		checkboxes_group: {
			cdr: 'CDR',
			messages: 'messages',
			registers__sip_msg: 'registers / sip options, subscribe, notify',
			pcap: 'pcap (download / upload)',
			audio_fax: 'audio & fax',
			active_calls: 'active calls',
			dashboard_charts: 'dashboard & charts',
			alerts_reports: 'alerts & reports',
			share: 'share',
			others: 'others',
		}
	},
	capture_rules: {
		field: {
			ip: 'IP address',
			mask: 'Network mask [0-32]',
			maskV6: 'Network mask [0-128]',
			prefix: 'Prefix',
			domain: 'Domain',
			header: 'SIP header',
			content: 'Content',
			content_type: 'Content type',
			direction: 'Direction',
			sensors_id: 'Sensors',
			sensors: 'Sensors',
			rtp: 'Record RTP',
			rtcp: 'Record RTCP',
			sip: 'Record SIP',
			graph: 'Record GRAPH',
			wav: 'Record WAV',
			register: 'Record REGISTER',
			dtmf: 'Record DTMF',
			skip: 'Skip',
			script: 'Run script',
			mos_lqo: 'Activate MOS LQO',
			mos_lqo_short: 'MOS LQO',
			hide_message: 'Hide message',
			spool_2: 'Store pcaps to second spool',
			remove_at: 'Auto remove at',
			no_permanent: 'Permanent rule',
			note: 'Note',
			deletetime: 'The rule will be deleted at'
		},
		field_help: {
			ip: 'IP address or network.',
			mask: 'Network mask from 32 - 0. 32 represents single IP adress. If you want to add whole 192.168.C.D network just add IP adress 192.168.0.0 and mask 16',
			prefix: 'Tel. number prefix. 222 will record all calss starting dialed number or caller number with 222',
			domain: '',
			header: '',
			content: '',
			content_type: '',
			direction: 'Match this rule only for source IP or only for destination IP or for both src or dst IP',
			rtp: 'Record RTP packets?',
			rtcp: 'Record RTCP packets?',
			sip: 'Record SIP packets?',
			graph: 'Record GRAPH files?',
			wav: 'Record WAV files?',
			register: 'Record REGISTER packets?',
			dtmf: 'Record DTMF ?',
			skip: 'Call will be completely skipped?',
			script: 'Tells sniffer to run shell script. See filtercommand in sniffer configuration.',
			mos_lqo: '',
			hide_message: '',
			remove_at: '',
			spool_2: 'Enable pcap storing into second spool. If the setting is not allowed be sure you have spool_index column in cdr_next table.',
			no_permanent: 'The rule is permanent by default. I.e it\'s not deleted by global rules autoremover. With this option you can disable it.'
		},
		button: {
			reloadSniffer: 'Reload sniffer',
			grouping_by_sensors: 'grouping by sensors'
		},
		text: {
			all_sensors: 'all sensors',
			questionSaveSetRtpWav: 'You have selected saving both RTP and WAV which is redundant and not needed. To get audio from the GUI you only need to store RTP because the audio is extracted on demand from RTP. Storing WAV doubles CPU and I/O resources - are you sure you want this?',
			alertNoWildcardsInPrefix: 'Capture rules does not support MySQL wildcards like %1245 or _. Use Capture rules by header and regular expressions instead.',
			realoadSnifersQuestionAfterChange: 'change made - reload all sniffers?',
			reloadingResult: 'reloading result',
			clickHereForKeep: 'click here for keep'
		},
		title: {
			ip: 'IP based',
			telnum: 'Calling/Called Number based',
			domain: 'Calling/Called Domain based',
			sip_header: 'SIP Header based'
		}
	},
	cust: {
		column: {
			name: 'name',
			cust_id: 'customer ID',
			customer_name: 'name',
			address: 'address',
			ip: 'IP',
			number: 'numbers',
			vat_or_id: 'VAT / ID',
			reseller_name: 'reseller',
			start_time: 'start at',
			postAddress: 'post address',
			type_ip: 'type / IP',
			server: 'server'
		},
		field: {
			reseller_id: 'Reseller',
			customer_id: 'Customer',
			name: 'Name',
			cust_id: 'Customer ID',
			address: 'Address',
			ip: 'IP',
			number: 'Numbers',
			enable_ip_detail: 'Enable IP detail',
			enable_ip_detail_for_reseller: 'Enable IP detail for Reseller'
		},
		field_help: {},
		title: {
			active: 'Active',
			archive: 'Archive'
		},
		grid: {
			subject_reseller: 'reseller',
			subject_customer: 'customer',
			subject_subsidiary: 'subsidiary'
		},
		createNewCustomer: 'create new customer',
		linkExistCustomer: 'link existing customer',
		deleteCustomer: 'delete customer',
		unlinkCustomerFromReseller: 'unlink customer from reseller',
		linkSelectCustomersToReseller: 'link select customers to reseller',
		unlinkSelectCustomersFromReseller: 'unlink select customers from reseller',
		removePasswordFromSelect: 'remove pasword (disable login)'
	},
	nagios: {
		column: {
			status_current_state: 'state',
			status_last_check_time: 'last check',
			status_last_update_time: 'last update'
		},
		field: {
			customer_id: 'customer'
		},
		title: {
			host: 'Nagios - Host',
			service: 'Nagios - Service',
			contact: 'Nagios - Contact',
			setting: 'Nagios - Seting',
			hostTab: 'host',
			hostgroupTab: 'group',
			serviceTab: 'service',
			servicegroupTab: 'group',
			contactTab: 'contact',
			contactgroupTab: 'group',
			timeperiodTab: 'time period',
			timeperiodDefineTab: 'define',
			timeperiodExcludeTab: 'exclude',
			commandTab: 'command',
			contactNotificationCommandSubTab: 'next notification',
			contactSubTab: 'contact',
			contactgroupSubTab: 'contact group',
			hostSubTab: 'host',
			hostgroupSubTab: 'host group',
			serviceSubTab: 'service',
			servicegroupSubTab: 'service group',
			hostParentSubTab: 'parent',
			hostContactSubTab: 'contact',
			contactHostSubTab: 'host',
			hostContactgroupSubTab: 'contact group',
			contactgroupHostSubTab: 'host',
			hostServiceSubTab: 'service',
			serviceHostSubTab: 'host',
			serviceHostgroupSubTab: 'host group',
			hostgroupServiceSubTab: 'service',
			serviceContactSubTab: 'contact',
			contactServiceSubTab: 'service',
			serviceContactgroupSubTab: 'contact group',
			contactgroupServiceSubTab: 'service'
		},
		linkExistContact: 'link exist contact',
		createNewContact: 'create new contact',
		editLinkContact: 'change link contact',
		editContact: 'edit contact',
		unlinkContact: 'unlink contact',
		deleteContact: 'delete contact',
		linkExistHost: 'link exist host',
		createNewHost: 'create new host',
		editLinkHost: 'change link host',
		editHost: 'edit host',
		unlinkHost: 'unlink host',
		deleteHost: 'delete host',
		linkExistService: 'link exist service',
		createNewService: 'create new service',
		editLinkService: 'change link service',
		editService: 'edit service',
		unlinkService: 'unlink service',
		deleteService: 'delete service',
		applyVmConfig: 'apply',
		newConfigurationSuccessfullyAccepted: 'new configuration successfully accepted'
	},
	common_settings: {
		field: {
			international_prefixes: 'international prefixes',
			international_number_min_length: 'min. international length',
			international_number_min_length_prefixes_strict: 'strict for prefixes',
			country_code_for_local_numbers: 'local numbers are in',
			enable_check_napa_without_prefix: 'enable check NANPA without prefixes',
			min_length_napa_without_prefix: 'min. length',
			skip_prefixes: 'trim prefixes'
		},
		field_help: {
			international_number_min_length: '<b><i>unchecked</i></b>: Any dialed number with count of digits equal or greater is treated as international. When dialed number is shorter, its treated as international only when dialed number starts with international prefix.<br><b><i>checked</i></b>: Dialed number is treated as international only when count of digits is greater or equal to defined value and dialed number starts with international prefix.',
			skip_prefixes: 'Trim left side of the prefix by specified number. If number begins with ^ it is considered as regex.',
			min_length_napa_without_prefix: 'minimum length for apply NANPA rules (without prefix \'1\')'
		},
		title: {
			commonSettings: 'Country Prefix',
			internationalRulesTab: 'international rules'
		}
	},
	billing: {
		column: {
			name: 'name',
			holiday_state_name: 'state holidays',
			country_name: 'country',
			prefix_number: 'prefix pattern',
			fixed_number: 'fixed length pattern',
			regex_number: 'regex pattern',
			price: 'price',
			t1: 'T1',
			t2: 'T2',
			billing_name: 'billing',
			ip_net: 'IP or net',
			default_customer_billing: 'default cust.',
			side: 'direction',
			default_use_for_number_format: 'format',
			default_use_for_number_type: 'area',
			use_for_number_format: 'format',
			use_for_number_type: 'area'
		},
		field: {
			name: 'Name',
			id_holiday_state: 'State holidays',
			default_price: 'Default Price',
			default_price_peak: 'Default Price peak',
			peak_offpeak: 'Enable peak / offpeak',
			default_peak_starts_hour: 'Default Peak starts hour',
			default_peak_starts_minute: 'minute',
			default_peak_ends_hour: 'Default Peak ends hour',
			default_peak_ends_minute: 'minute',
			default_weekend_start: 'Default Weekend start',
			default_t1: 'Default T1',
			default_t2: 'Default T2',
			default_use_for_number_format: 'Format match',
			default_use_for_number_type: 'Area match',
			default_customer_billing: 'Default customer billing',
			prefix_number: 'Prefix number',
			fixed_number: 'Fixed number',
			regex_number: 'Regex number',
			id_sensor: 'Sensor',
			price: 'Price',
			price_peak: 'Price peak',
			override_default_peak_offpeak: 'Override default peak / offpeak',
			peak_starts_hour: 'Peak starts hour',
			peak_starts_minute: 'minute',
			peak_ends_hour: 'Peak ends hour',
			peak_ends_minute: 'minute',
			weekend_start: 'Weekend start',
			t1: 'T1',
			t2: 'T2',
			use_for_number_format: 'Format match',
			use_for_number_type: 'Area match',
			country_code: 'Country',
			description: 'Description',
			type: 'Type',
			month: 'Month',
			month_day: 'Month day',
			date: 'Date',
			ip: 'IP',
			mask: 'Mask',
			number: 'Number',
			fixed: 'Fixed',
			side: 'Direction',
			id_billing: 'Biling',
			addresses: 'Addresses',
			numbers: 'Numbers',
			addresses_destination: 'Destination IP addresses',
			numbers_destination: 'Destination numbers',
			addresses_source: 'Source IP addresses',
			numbers_source: 'Source Numbers',
			limitation_for_sensors: 'Limitation for sensors',
			sensors: 'Sensors',
			currency_code: 'Currency',
			timezone_name: 'Timezone',
			enable_by_ip: 'Enable by addresses',
			enable_by_number: 'Enable by numbers',
			enable_by_domain: 'Enable by domains',
			week_start: 'Week start',
			hours_history_in_days: 'Hours history [days]',
			days_history_in_weeks: 'Days history [weeks]',
			weeks_history_in_months: 'Weeks history [months]',
			month_history_in_years: 'Months history [years]',
			international_prefixes_configuration: 'international prefixes configuration',
			request: 'request',
			calldate: 'datetime',
			duration: 'duration',
			caller: 'caller num',
			called: 'called num',
			caller_domain: 'caller domain',
			called_domain: 'called domain',
			domain: 'domain',
			sipcallerip: 'source IP',
			sipcalledip: 'destination IP',
			response: 'response',
			price_operator: 'operator price',
			price_customer: 'customer price',
			debug_output: 'debug output',
			sensor_id: 'sensor',
			operator_rule: 'operator rule',
			customer_rule: 'customer rule',
			use_exclude_rules: 'use exclude rules',
			progress: 'progress'
		},
		field_help: {
			default_use_for_number_format: 'Default use for number format - help',
			default_use_for_number_type: 'Default use for number type - help',
			use_for_number_format: 'Use for number format - help',
			use_for_number_type: 'Use for number type - help'
		},
		combodata: {
			numberFormat_original: 'original',
			numberFormat_normalized: 'normalized',
			numberFormat_both: 'original or normalized',
			numberType_local: 'local',
			numberType_international: 'international',
			numberType_both: 'local or international'
		},
		button: {
			start: 'start',
			stop: 'stop'
		},
		title: {
			billingConfiguration: 'Billing configuration',
			billingTab: 'billing type / patterns',
			billingRuleTab: 'patterns',
			holidayStateTab: 'state holidays',
			holidayStateDateTab: 'dates',
			operatorAssignmentTab: 'operator assignment',
			customerAssignmentTab: 'customer assignment',
			addressesTab: 'addresses',
			numbersTab: 'numbers',
			domainsTab: 'domains',
			addresses_destinationTab: 'destination IP addresses',
			numbers_destinationTab: 'destination numbers',
			addresses_sourceTab: 'source IP addresses',
			numbers_sourceTab: 'source numbers',
			excludeTab: 'exclude',
			currencyTab: 'currency',
			agregationTab: 'aggregation',
			settingsTab: 'settings',
			excludeAddressesTab: 'exclude addresses',
			excludeNumbersTab: 'exclude numbers',
			excludeDomainsTab: 'exclude domains',
			billingTest: 'billing test',
			revaluationBilling_selectedRows: 'Revaluation Billing for selected rows',
			revaluationBilling_allFilteredRows: 'Revaluation Billing for all filtered rows' 
		},
		text: {
			internationalPrefixesConfiguration: 'international prefixes configuration',
			operator: 'operator',
			customer: 'customer',
			auto: 'auto',
			theRevaluationWasCompletedSuccessfully: 'the revaluation was completed successfully'
		}
	},
	fraud: {
		column: {
			name: 'name',
			type: 'type',
			priority: 'priority',
			direction: 'direction',
			ip_number: 'ip / number',
			cb_descr: 'group description',
			alertCondition: 'condition',
			whitelist: 'whitelist'
		},
		field: {
			name: 'Name',
			use_group_classification_rule: 'Group of classification rule',
			note: 'Note',
			type: 'Type',
			direction: 'Direction',
			ip: 'IP Addresses',
			number: 'Numbers',
			src_ip__cb_ip_groups_id: 'IP group',
			src_ip__ip: 'IP',
			src_ip__countries: 'Countries',
			src_ip__cb_country_groups_id: 'Area',
			src_ip__change: 'IP change',
			user_agent: 'User Agent',
			dst_num__cb_number_groups_id: 'Number group',
			dst_num__number: 'Number',
			dst_num__countries: 'Countries',
			dst_num__cb_country_groups_id: 'Area',
			price__per_call: 'Price',
			price__during_interval__limit: 'Limit',
			price__during_interval__interval: 'Interval',
			same_number__limit: 'Limit',
			same_number__interval: 'Interval',
			international_number_limit__limit: 'Limit',
			international_number_limit__interval: 'Interval',
			international_number_limit__length_number_gt: 'Number length gt',
			concurrent_calls__limit_max: 'Max',
			concurrent_calls__limit_min: 'Min',
			concurrent_calls__from_hour: 'From hour',
			concurrent_calls__to_hour: 'To hour',
			whitelist: 'Whitelist'
		},
		title: {
			fraudConfiguration: 'Fraud Detection - configuration',
			classificationRuleGroupTab: 'classification rules - groups',
			classificationRuleTab: 'classification rules',
			alertRuleTab: 'alert rules'
		}
	},
	setting: {
		column: {
			flag: 'flag',
			lang_short: 'lang - short',
			lang: 'language',
			note: 'note',
			type: 'type',
			string_id: 'id',
			string_en: 'en',
			string_locale: 'locale'
		},
		field: {
			lang_short: 'Language - shortcut',
			lang: 'Language',
			flag: 'Flag',
			note: 'Note',
			string_en: 'En',
			string_locale: 'Locale'
		},
		title: {
			localization: 'Localization',
			localizationLangStringTab: 'strings'
		},
		international_rules_field: {
			international_prefixes: 'international prefixes',
			international_number_min_length: 'min. international length',
			international_number_min_length_prefixes_strict: 'strict for prefixes',
			country_code_for_local_numbers: 'local numbers are in',
			enable_check_napa_without_prefix: 'enable check NANPA without prefixes',
			min_length_napa_without_prefix: 'min.length',
			skip_prefixes: 'trim prefixes'
		},
		international_rules_field_help: {
			international_number_min_length: '<b><i>unchecked</i></b>: Any dialed number with count of digits equal or greater is treated as international. When dialed number is shorter, its treated as international only when dialed number starts with international prefix.<br><b><i>checked</i></b>: Dialed number is treated as international only when count of digits is greater or equal to defined value and dialed number starts with international prefix.',
			skip_prefixes: 'Trim left side of the prefix by specified number. If number begins with ^ it is considered as regex.',
			min_length_napa_without_prefix: 'minimum length for apply NANPA rules (without prefix \'1\')'
		}
	},
	changeUserAuth: {
		text: {
			possibleActions: 'Possible action(s)',
			requiredActions: 'Required action(s)',
			requirePassword: "Your account requires password setup. Password expired.",
			require2FA: "Your account requires Two Factor Authentification setup. You will require 2FA application like Google Authenticator on Android or iOS.",
			authRequired: 'Authorization is required.',
			newPassword: 'Enter new password.',
			new2FA: 'Scan this qrcode by your favorite 2FA application or enter the secret code manually. We recommend to archive your secret code in case you loose your phone.',
			newSecret: 'New secret',
			verify: 'Enter your password / PIN code which you see in your 2FA application. Please note that the PIN code changes every minute and the verification will fail if your server has out of sync time.',
			finish: 'Setup is complete. Click to Finish for save new password / 2FA.',
			authMissingSetting: 'You didn\'t choose any action.',
			authMissingOldPassword: 'Missing actual password.',
			authMissingOld2FAcode: 'Missing actual 2FA code.',
			authMissingNewPassword: 'Missing new password.',
			authDifferentNewPassword: 'Different new passwords.',
			authNeedDiffPasswordNewOld: 'New password must be different than your old pasword.',
			authMissingPassword: 'Missing password.',
			authMissing2FAcode: 'Missing 2FA code.'
		},
		title: {
			authChangeAuth: 'Password settings / Two Factor Authentication (2FA)',
			authErrorTitle: 'Error',
			start_info_form: 'request selection',
			auth_form: 'user authentication',
			newpass_form: 'new password',
			new2fa_form: 'new 2FA secure',
			verify_form: 'verification',
			finish_form: 'finish'
		},
		checkbox: {
			setPassword: 'Change password',
			set2FAsecret: 'Set Two Factor Authentication (2FA)',
			change2FAsecret: 'Change Two Factor Authentication (2FA)'
		},
		field: {
			password: 'Actual password',
			code2fa: 'Actual 2FA code',
			newpassword: 'Password',
			newpassword2: 'Verify password',
			verifypassword: 'New password',
			verifycode2fa: '2FA code for the new secret'
		},
		button: {
			authGenNew2FA: 'Other 2FA secret'
		}
	},
	tools: {
		column: {
			description: 'description',
			filepathname: 'file',
			table: 'table',
			table_size: 'table size',
			problem_description: 'problem description',
			problem_severity: 'severity',
			order_num: '#',
			sql: 'SQL',
			run_at: 'run at',
			finish_at: 'finished at',
			duration: 'duration',
			pid: 'pid',
			task_id: 'task'
		},
		field: {
			oldest_date_in_spool: 'oldest date in spool',
			notes: 'notes',
			email: 'e-mail'
		},
		button: {
			runSql: 'start upgrade / run sql',
			copySqlToClipboard: 'copy sql to clipboard'
		},
		text: {
			selectFilesForRestore: 'Select files for restore.',
			clickToButtonRestoreForStartRestoreSelectedFiles: 'Click to button Restore for start restore selected files.',
			restoreGuiConfigurationSuccess: 'Restoring configuration from backup was successfully completed. The application will be reloaded.',
			restoreGuiConfigurationWarnings: 'Restoring configuration from backup was completed with warnings. The application will be reloaded.',
			restoreGuiConfigurationErrors: 'Restoring configuration from backup was completed with errors.',
			restoreGuiConfigurationErrorsAndWarning: 'Errors and warnings are caused by insufficient permissions on the file system. You can try command \'php php/run.php restoreGuiConfigurationFiles -f backup.zip\'.',
			selectTablesForRestore: 'Select tables for restore.',
			clickToButtonRestoreForStartRestoreSelectedTables: 'Click to button Restore for start restore selected tables.',
			restoreGuiTablesSuccess: 'Restoring tables from backup was successfully completed. The application will be reloaded.',
			restoreGuiTablesWarnings: 'Restoring tables from backup was completed with warnings. The application will be reloaded.',
			restoreGuiTablesErrors: 'Restoring tables from backup was completed with errors.',
			tableProblems: 'Table problems (select problems to fix)',
			sqlQueriesToSolveProblems: 'List of MySQL queries for upgrade operations',
			pleaseSetOldestDateInSpool: 'please set oldest date in spool',
			sqlOperationCanTakeLotOfTime: 'warning: sql operations can take a lot of time',
			showLowSeverity: 'show low severity',
			sqlQueue: 'sql queue',
			databaseMaintenanceInProgress: 'Database maintenance in progress. Please wait.',
			databaseMaintenanceIsComplete: 'Database maintenance is complete.',
			confirmRunBatchSql: 'WARNING - upgrade operations can take long time (depends on the size of the tables) and during the upgrade you will be not able to use the GUI.',
			confirmCancelBatchSql: 'Do you really cancel sql queries?',
			mysqlSchemaIsOK: 'MySQL schema is OK',
			upgradeSensorsQuestionBeforeUpgradingSqlSchema: 'Before upgrading SQL schema, some sensors needs to upgrade - do you want to upgrade them?',
			upgradeSensorsQuestionBeforeGenerateDebugLog: 'Before generate debug log, some sensors needs to upgrade - do you want to upgrade them?',
			generateDebugLogInfo: 'After you press the send button, your configuration and diagnostic information will be sent.',
			generateDebugLogLinkInfo: 'Here is a link to access the information that was sent.'
		},
		title: {
			restoreGuiConfiguration: 'Restore GUI configuration',
			restoreGuiConfiguration_selectFiles: 'Restore GUI configuration - select files',
			restoreGuiConfigTables: 'Restore GUI configuration tables',
			restoreGuiDataTables: 'Restore GUI data tables',
			restoreGuiConfigTables_selectTables: 'Restore GUI configuration tables - select tables',
			restoreGuiDataTables_selectTables: 'Restore GUI data tables - select tables',
			problemsInTables: 'MySQL schema problems',
			updateTablesSchema: 'MySQL schema update',
			generateDebugLog: 'Generate debug log'
		}
	},
	rtpStreamAnalysis: {
		column: {
			'packet': 'packet',
			'time [s]': 'time [s]',
			'rtp ts [s]': 'rtp ts [s]',
			'seq': 'seq',
			'delta [ms]': 'delta [ms]',
			'transit [ms]': 'transit [ms]',
			'skew [ms]': 'skew [ms]',
			'jitter': 'jitter',
			'marker': 'marker',
			'bad seq': 'bad seq',
			'mos 50': 'mos 50',
			'mos 200': 'mos 200',
			'mos adapt': 'mos adapt',
			'mos silence': 'mos silence',
			'payload len': 'payload len',
			'codec': 'codec',
			'energylevel': 'energy'
		},
		columnTip: {
			'packet': '',
			'time [s]': '',
			'rtp ts [s]': '',
			'seq': '',
			'delta [ms]': '',
			'transit [ms]': '',
			'skew [ms]': '',
			'jitter': '',
			'marker': '',
			'bad seq': '',
			'mos 50': '',
			'mos 200': '',
			'mos adapt': '',
			'mos silence': '',
			'payload len': '',
			'codec': ''
		},
		field: {
			directUpdateCharts: 'update chart position during scrolling'
		},
		button: {
			createAudio: 'create audio',
			audio: 'audio',
			undock: 'undock',
			close: 'close',
			nextStream: 'next stream'
		},
		menu: {
			openInNewWindow: 'open in new window',
			openInDock: 'open in dock'
		},
		combomenu: {
			'spectrogram': 'spectrogram',
			'wave': 'wave',
			'spectrogram & wave': 'spectrogram & wave'
		},
		text: {
			findNext: 'find next',
			notFound: 'not found'
		},
		title: {
			rtpStreamAnalysis: 'RTP stream analysis',
			tree: 'tree',
			payload: 'payload',
			chart: 'Full time range - click on chart to navigate to specific packet.',
			zoom_chart: 'Zoomed range - click on chart to navigate to specific packet.',
			one_chart: 'click on chart to navigate to specific packet'
		}
	},
	pcapTools: {
		column: {
			id : 'id',
			calldate: 'calldate',
			caller: 'caller',
			called: 'called',
			error: 'error'
		},
		text: {
			errors_missingPcaps: 'errors / missing pcaps',
			questionContinue: 'continue?'
		}
	},
	otherTables: {
		column: {
			code: 'code',
			custom_code: 'custom code',
			name: 'name',
			country_name: 'country',
			main_currency: 'main',
			exchange_rate: 'exchange rate'
		},
		field: {
			code: 'Code',
			custom_code: 'Custom code',
			name: 'Name',
			country_code: 'Country',
			main_currency: 'Main currency',
			exchange_rate: 'Exchange rate',
			daily_update: 'Daily update',
			description: 'Description'
		},
		button: {
			loadExchangeRate: 'load exchange rate'
		}
	},
	collectd: {
		field: {
			module: 'module',
			from: 'from',
			to: 'to'
		}
	},
	sensors: {
		column: {
			enable: 'enable',
			is_server: 'Is server for<br>client/server mode',
			default_for_active_call: 'Default for<br>active call',
			auto_upgrade: 'Auto<br>upgrade',
			version: 'Version',
			uid: 'user id',
			user_name: 'user name',
			state: 'state',
			confirmed: 'confirmed',
			time: 'time',
			id_sensor: 'sensor',
			type: 'type',
			message: 'message'
		},
		field: {
			id_sensor: 'Sensor ID',
			name: 'Name',
			managerIp: 'Manager IP',
			managerPort: 'Port',
			read_timeout: 'Read timeout',
			color_background: 'Background Color',
			color_chart: 'Chart Color',
			is_server: 'Is server for client/server mode',
			all_clients_in_active_calls: 'Show calls from all clients in active calls',
			default_for_active_call: 'Default for active calls',
			'interface': 'Interface',
			tcpdump_folder: 'Folder',
			tcpdump_mount_folder: 'Mount folder',
			from: 'from',
			to: 'to',
			newItem: 'new {0} item',
			level: 'level',
			showDefaultItems: 'show default items',
			override_international_rules: 'override international rules',
			override_country_prefixes: 'override country prefixes / rules',
			auto_upgrade: 'Enable auto upgrade',
			auto_upgrade_at: 'Run at time',
			auto_upgrade_week_days: 'Only in days',
			auto_upgrade_email: 'Send resume to'
		},
		title: {
			sensors: 'Sensors',
			tcpdumpParameters: 'tcpdump parameters',
			sensorGraphs: 'sensor graphs',
			sensorLiveSniffers: 'active live sniffing',
			sensorConfiguration: 'sensor configuration',
			addItem: 'add new {0} item',
			suffixDirectConfiguration: 'direct configuration',
			suffixDatabaseConfiguration: 'database configuration',
			newSensorLogs: 'new sensor logs',
			sublogs: 'sublogs',
			upgradeSensor: 'Upgrading sensor {0} to version {1}',
			upgradeSensors: 'Upgrading sensors {0} to version {1}',
			basicData: 'basic data',
			internationalRules: 'international rules',
			countryPrefixes: 'country rules',
			autoUpgrade: 'upgrade'
		},
		text: {
			duplicityItemPrefix: 'duplicity',
			deleteItemPrefix: 'delete',
			applyNewConfigurationOnSensor: 'apply new configuration on sensor',
			valueHasChanged: 'value has changed',
			valueIsRemoved: 'value is removed from database (or active run) and return to value in base configuration',
			valueIsSetInConfiguration: 'value is set in base configuration',
			valueIsSetInDatabase: 'value is set in database',
			valueIsSetInActiveRun: 'value is set in active run',
			incorrectHostIp: 'incorrect host IP',
			sensorIdMustBeUnique: 'sensor id must be unique',
			LsensorIdMustBeGreaterThan0: 'sensor id must be greater than 0',
			betaVersion: 'beta version',
			loadingUpgradeInformation: 'Loading upgrade information...',
			loadingSensors: 'Loading sensors...',
			waitForFirstState: 'wait for first state',
			questionStopSniffing: 'Stop sniffing for selected row?'
		},
		combo: {
			levelNormal: 'normal',
			levelAdvanced: 'advanced',
			levelExpert: 'expert',
			levelObsolete: 'obsolete'
		},
		menu: {
			databaseConfiguration: 'database configuration',
			directConfiguration: 'direct configuration',
			undoChangeValue: 'undo change value',
			disableValueInDb: 'disable value in database and return to value in base configuration',
			disableValueInJson: 'disable value in active run and return to value in base configuration',
			undoRemoveValue: 'undo remove value from database (or active run)',
			betaVersions: 'beta versions'
		},
		tbar: {
			showStatus: 'expand status',
			reloadStatus: 'reload status',
			upgradeAll: 'upgrade all',
			paginator: 'paginator',
			type: 'type',
			showConfirmed: 'show confirmed',
			confirmAll: 'confirm all'
		},
		tooltip: {
			restartSensor: 'restart sensor',
			upgradeSensor: 'upgrade sensor',
			upgradeSensorToNewVersion: 'upgrade sensor to new version',
			liveSniffers: 'live sniffers',
			editConfiguration: 'edit configuration',
			graphs: 'graphs',
			stopSniffing: 'stop sniffing'
		},
		stat: {
			version: 'version',
			pbStatString: 'status',
			calldateOfLastRecordInSqlDatabase: 'calldate of a last record in sql database',
			timeOfLastSqlQueueRecord: 'time of a last sql queue record',
			pbCountPacketDrop: '#packet&nbsp;drops',
			uptime: 'uptime'
		}
	},
	crontab: {
		column: {
			last_run_at: 'Last run at'
		},
		field: {
			descr: 'Description',
			enable: 'Enabled',
			type: 'Type',
			type_at: 'Schedule',
			schedule_at: 'Schedule at',
			at_day_of_week: 'day of week',
			at_day_of_month: 'day of month',
			every_day_align: 'Day align',
			time_interval: 'Time interval',
			start_shift_minutes: 'Start shift minutes',
			use_last_record_id: 'Use last record id',
			send_to: 'Send to',
			send_from: 'Send from',
			send_report_to: 'Send report to',
			send_report_from: 'Send report from',
			csv_store_prefix: 'CSV name prefix',
			csv_send_in_attachment: 'CSV send in attachment',
			csv_delete_after_days: 'delete CSV after days',
			note: 'Note',
			cleaning_db_records_enable: 'cleaning database',
			cleaning_db_records_enable_cdr: 'cleaning CDR',
			cleaning_db_records_enable_message: 'cleaning Messages',
			cleaning_sip_pcaps_enable: 'cleaning SIP pcaps',
			cleaning_sip_pcaps_enable_cdr: 'cleaning SIP pcaps',
			cleaning_sip_pcaps_enable_message: 'cleaning pcaps',
			cleaning_rtp_pcaps_enable: 'cleaning RTP pcaps',
			older_than_days: 'older than days',
			enable_delete_records: 'enable delete records',
			enable_delete_pcaps: 'enable delete pcaps (for tar = no)',
			custom_columns_enable: 'Custom columns',
			custom_columns_group_by: 'group by',
			custom_columns_order_by: 'order by'
		},
		field_custom_columns: {
			field: 'field',
			header: 'header'
		},
		field_help: {
			csv_store_prefix: 'for enable set \'Folder for export CSV\' in System configuration'
		},
		title: {
			forExperts: 'for experts',
			tabBasicData: 'basic data',
			tabFilterCommon: 'filter - common',
			tabFilterRtp: 'filter - RTP',
			tabFilterDscp: 'filter - DSCP',
			tabFilterFiltersComb: 'filter - combination',
			tabFilterMessage: 'filter',
			tabFilterReg: 'filter',
			crontabScheduler: 'Crontab Scheduler',
			csvExports: 'CSV Export',
			customCleaning: 'Custom Auto Cleaning',
			customCleaningRules: 'rules',
			customCleaningSettings: 'settings'
		},
		text: {
			at: 'at',
			customCleaningMainInfo: 'This is alternative cleaning method for custom rules which can overload mysql or filesystem. For general cleaning please use maxpool* and cleandatabase options in sniffer configuration which is faster by magnitudes.'
		}
	},
	treeArrange: {
		field: {
			name: 'name'
		},
		button: {
			newFolder: 'new folder',
			renameFolder: 'rename folder',
			removeFolder: 'remove folder',
			renameTemplate_dashboards: 'rename dashboard',
			removeTemplate_dashboards: 'remove dashboard'
		},
		menu: {
			inRoot: 'in root',
			inSelected: 'in selected'
		},
		title: {
			newFolder: 'new folder',
			renameTemplate_dashboards: 'rename dashboard'
		},
		text: {
			deleteSelectedFolderQuestion: 'delete selected folder?',
			deleteSelectedTemplate_dashboardsQuestion: 'delete selected dashboard?'
		}
	},
	fields: {
		column: {
			CBX_CdrSipIP_hostname: 'hostname',
			CBX_CdrErrCodes: 'response',
			CBX_MessageErrCodes: 'response',
			CBX_MessageSipIP_hostname: 'hostname',
			CBX_cbIpGroups_descr: 'description',
			CBX_cbIpGroups_IP: 'ip address',
			CBX_cbDomainGroups_descr: 'description',
			CBX_cbDomainGroups_domain: 'domain',
			CBX_cbDomainGroups_side: 'side',
			CBX_cbNumberGroups_descr: 'description',
			CBX_cbNumberGroups_number: 'number',
			CBX_cbEmailGroups_descr: 'description',
			CBX_cbEmailGroups_email: 'e-mail address',
			CBX_cbCountryGroups_descr: 'description',
			CBX_cbCountryGroups_country: 'country',
			CBX_cbUaGroups_descr: 'description',
			CBX_cbUaGroups_ua: 'user agent',
			CBX_cbTimePeriod_descr: 'description',
			CBX_trackerStatus_type: 'type',
			CBX_trackerStatus_descr: 'description',
			CBX_trackerCategory_type: 'type',
			CBX_trackerCategory_descr: 'descr'
		},
		field: {
			CBX_Codec: 'codec',
			CBX_RegState: 'state',
			CBX_Trunk: 'trunk',
			CBX_Users: 'user name',
			CBX_Groups: 'group name',
			CBX_ScreenPopupProfile: 'profile name',
			CBX_CdrSipUsers: 'sip user',
			CBX_CdrSipIP: 'sip IP',
			CBX_CdrCodecsA: 'codec',
			CBX_CdrErrCodes: 'SIP resp.',
			CBX_MessageErrCodes: 'SIP resp.',
			CBX_MessageSipIP: 'sip IP',
			CBX_MessageCodecsA: 'codec',
			CBX_cbIpGroups: 'IP Group',
			CBX_cbNumberGroups: 'Number Group',
			CBX_cbDomainGroups: 'Domain Group',
			CBX_cbEmailGroups: 'E-mail Groups',
			CBX_cbCountryGroups: 'Country Groups',
			CBX_cbUaGroups: 'UA Groups',
			CBX_cbTimePeriod: 'Time periods',
			CBX_trackerStatus: 'status',
			CBX_trackerCategory: 'category',
			CBX_sensor: 'sensor',
			CBX_cdrCharts: 'chart',
			CBX_messageTypes: 'message type'
		},
		text: {
			CBX_sensor_empty: 'local sensor',
			CBX_sensor_all: 'ALL'
		}
	},
	login: {
		username: 'Username',
		login: 'Login',
		rememberMe: 'Remember Me',
		exit: 'Exit',
		password: 'Password',
		cloudToken: 'Cloud',
		pleaseLogin: 'Please Log In',
		pleaseRelogin: 'Please enter password for continue',
		loginButton: 'Log In',
		waitTitle: 'Please wait',
		waitMsg: 'Transfering data...',
		loginSuccess: 'Login succesfull',
		serverUnavailable: 'Server unavailable',
		unknownError: 'Unknown error',
		warning: 'Warning',
		language: 'Language',
		loginFailed: 'Incorrect username or password.',
		code2fa: '2FA Code',
		selectCloudToken: 'please select Cloud'
	},
	network: {
                field: {
                        name: 'Name',
                        'interface': 'Interface',
                        mac_address: 'MAC',
                        vlan: 'VLAN',
                        vlan_id: 'VLAN ID',
                        type: 'Type',
                        ip_address: 'IP',
                        network_subnet: 'Subnet',
                        dhcp_hostname: 'Hostname',
                        dhcp_lease_time: 'Lease time',
                        dhcp_vendor: 'Vendor',
                        network: 'Network',
                        network_mask: 'Mask',
                        gateway: 'Gateway',
                        source_ip: 'Source IP',
                        hostname: 'Hostname',
                        domain: 'Domain',
                        dns_1: 'DNS 1',
                        dns_2: 'DNS 2',
                        dns_3: 'DNS 3',
			interfaces: 'Interfaces'
                },
                title: {
                        ipAddressesTab: 'IP addresses',
                        routingTab: 'Routing',
                        dnsTab: 'DNS',
                        network: 'Network',
			bridgeTab: 'Bridge network'
                },
                button: {
                        restartNetwork: 'Restart network'
                }
        },
	svg_paint: {
		column: {
			condition_text: 'condition',
			color: 'color',
			text: 'text',
			prefix_count_records: '#recs <= ',
			prefix_response_time: '#resp >= ',
			prefix_response_time_2: '#resp T2 >= ',
			suffix_count_records: '',
			suffix_response_time: 'ms',
			suffix_response_time_2: 'ms'
		},
		field: {
			paintName: 'paint',
			paintNameName: 'paint name',
			privatePaint: 'private',
			showForUsers: 'restrict for users',
			showForGroups: 'show for groups',
			item_1: 'item 1',
			item_2: 'item 2',
			type_condition: 'condition type',
			count_records: '#records <=',
			response_time: 'resp. [ms] >=',
			response_time_2: 'resp. T2 [ms] >=',
			show_condition_value: 'show value',
			filter_type: 'filter type',
			check_last_minutes: 'check only N last minutes',
			check_period_minutes: 'check period',
			chart_interval: 'interval',
			refresh_period: 'refresh period',
			interval_offset: 'interval offset',
			chart_type: 'chart type',
			selected_items: 'selected items'
		},
		field_properties: {
			href: 'icon',
			size_perc: 'size [%]',
			icon_text: 'text',
			fill: 'color',
			'font-family': 'font',
			'font-size': 'font size',
			stroke: 'color',
			'stroke-width': 'width',
			'stroke-dasharray': 'dasharray',
			'marker-start': 'arrow left',
			'marker-end': 'arrow right',
			text_base: 'text',
			width: 'width',
			height: 'height',
			chart_text: 'text',
			chart: 'chart',
			scale_perc: 'scale [%]'
		},
		button: {
			newPaint: 'new map',
			selectPaint: 'map',
			savePaint: 'save',
			editPaint: 'edit',
			deletePaint: 'delete',
			urlPaint: 'URL',
			save: 'save',
			cancel: 'cancel',
			exportAs: 'export as...',
			newText: 'new text',
			newLink: 'new link',
			addLink: 'add link',
			newChart: 'new chart',
			cancel: 'cancel',
			deleteItem: 'delete item',
			setWatching: 'edit color filter',
			setChart: 'edit chart',
			add: 'add',
			save: 'save',
			startWatching: 'start map',
			stopWatching: 'stop map',
			scale: 'scale',
			multipleSelect: 'multiple select',
			selectAll: 'select all',
			unselectAll: 'unselect all',
			close: 'close'
		},
		button_help: {
			urlPaint: 'Show current paint / view URL'
		},
		menu: {
			exportAsSvg: 'export as SVG',
			exportAsPdf: 'export as PDF',
			showWatchingRecords: 'show watching records',
			deleteItem: 'delete item',
			setWatching: 'edit color filter',
			setChart: 'edit chart',
			refreshNow: 'refresh now',
			classicNMUrl: 'classic URL',
			shareNMUrl: 'share URL'
		},
		text: {
			clearPaintQuestion: 'clear paint?',
			deletePaintQuestion: 'delete paint?',
			nameIsUsed_OverwriteQuestion: 'Name is used. Overwrite?',
			selectTwoItemsForNewLink: 'Select two items for new link and click to buton \'add link\'.',
			deleteRowQuestion: 'delete row?',
			new_text: 'new text',
			new_chart: 'new chart',
			chartRenderInfo: 'chart will render only when map is started',
			missingChartConfiguration: 'chart is not yet configured',
			clickHereForEditChart: 'click here for edit chart',
			deleteSelectedItemQuestion: 'delete selected item?'
		},
		title: {
			panel: 'Network map',
			savePaint: 'Save paint',
			editPaint: 'Edit paint',
			addNewLink: 'Add new link',
			setWatching: 'edit color filter',
			setChart: 'Edit chart',
			tabFilter: 'filter',
			tabFilterCommon: 'filter - common',
			tabFilterRtp: 'filter - RTP',
			tabFilterDscp: 'filter - DSCP',
			tabFilterFiltersComb: 'filters - combination',
			selectNewChartType: 'Select chart type',
			multipleSelect: 'multiple select',
			viewUrl: 'Show current map / view URL',
			properties: 'properties'
		},
		combomenu: {
			CDR: 'CDR',
			Message: 'Message',
			HTTP: 'HTTP',
			typeCondition_count_records: 'number of records',
			typeCondition_response_time: 'response time',
			typeCondition_response_time_2: 'response time T2'
		},
		tooltip: {
			delete_row: 'delete'
		}
	},
	gmap: {
		column: {
			count_ge: 'count >=',
			color: 'color',
			strokeWidth: 'stroke width',
			fontSize: 'font size',
			fontBold: 'bold'
		},
		field: {
			gmapApiInvalidKeyText: 'Google Maps API Key is invalid.',
			gmapApiUndefinedKeyText: 'Google Maps API Key is undefined.',
			gmapApiSetKey: 'Please set key',
			gmapApiSetNewKey: 'Please set new key',
			gmapApiKeyGenerator: 'Google Maps API Key generator',
			gmapApiKey: 'Google Maps API Key',
			search: 'search',
			maxZoom: 'max. zoom'
		},
		marker: {
			sip: 'SIP (GeoLocation by SIP IP)',
			geos: 'GeoIP (location from SIP header)',
			geop: 'Geo position (from SIP header)'
		},
		tbar: {
			caller_called_by: 'src/dst by',
			centerMarkers: 'center markers',
			loadGeoipData: 'load / update geoip data',
			scale: 'items scale',
			lineColors: 'line colors',
			geoipCustomer: 'customer geoIP',
			refreshInterval: 'refresh interval'
		},
		button: {
			add: 'add',
			save: 'save',
			remove: 'remove'
		},
		title: {
			map: 'map',
			gmapApiKey: 'Google Maps API Key',
			lineColors: 'Line colors',
			customerGeoIP: 'Customer GeoIP',
			internationalRules: 'International rules',
			activeCallsMap: 'Active Calls Map - beta version',
			selectPositionFromPap: 'select position from map'
		},
		text: {
			removeRowQuestion: 'remove row?',
			getPosError_ip_is_private: 'The IP address is a reserved IP address (private, multicast, etc.).',
			getPosError_unknown: 'unable to find geological position',
			download_osm_offline_question: 'Download now OpenStreetMap offline tiles?'
		},
		tooltip: {
			delete_row: 'delete'
		},
		msgbox: {
			missingKey: 'missing key',
			missingKeyUserId: 'missing key / user id',
			missingKeyText: 'Missing key for geolocation portal <b>{portal_name}</b>. ' + 
					'Click on YES button if you want to be transfered to {portal_url} page.' +
					'<br><br>' +
					'<i>The key must be entered at the server side in configuration file \'configuration.php\':<br>' + 
					'&nbsp;&nbsp;&nbsp;define(\'{key_config}\', \'your key\');</i>',
			missingKeyUserIdText: 'Missing key / user id for geolocation portal <b>{portal_name}</b>. ' + 
					      'Click on YES button if you want to be transfered to {portal_url} page.' +
					      '<br><br>' +
					      '<i>The key and user id must be entered at the server side in configuration file \'configuration.php\':<br>' + 
					      '&nbsp;&nbsp;&nbsp;define(\'{key_config}\', \'your key\');<br>' + 
					      '&nbsp;&nbsp;&nbsp;define(\'{user_id_config}\', \'your user id\');</i>',
			invalidKey: 'invalid key',
			invalidKeyUserId: 'invalid key / user id',
			invalidKeyText: 'Invalid key for geolocation portal <b>{portal_name}</b>. ' + 
					'Check the validity of your key.' +
					'<br><br>' +
					'<i>The key is entered at the server side in configuration file \'configuration.php\':<br>' + 
					'&nbsp;&nbsp;&nbsp;define(\'{key_config}\', \'your key\');</i>',
			invalidKeyUserIdText: 'Invalid key / user id for geolocation portal <b>{portal_name}</b>. ' + 
					      'Check the validity of your key and user id.' +
					      '<br><br>' +
					      '<i>The key and user id is entered at the server side in configuration file \'configuration.php\':<br>' + 
					      '&nbsp;&nbsp;&nbsp;define(\'{key_config}\', \'your key\');<br>' + 
					      '&nbsp;&nbsp;&nbsp;define(\'{user_id_config}\', \'your user id\');</i>',
			gmapApiInvalidKeyHeader: 'Google Maps API Key is invalid',
			gmapApiUndefinedKeyHeader: 'Google Maps API Key is undefined',
			gmapApiInvalidKeyMessage: 'Application need valid Google Maps API Key.',
			gmapApiUndefinedKeyMessage: 'Application need valid Google Maps API Key.',
			gmapApiContactAdministratorMessage: 'Please contact your administrator.',
			gmapApiNewKeyQuestion: 'Do you want to define a key now?',
			missingDataHeader: 'missing data',
			missingDataText: 'Missing local geolocation data. Download data from ' + appWeb  + '?',
			obsoleteDataHeader: 'obsolete data',
			obsoleteDataText: 'Local geolocation data is obsolete. Download new version of data from ' + appWeb  + '?',
			incompleteDataHeader: 'incomplete data',
			incompleteDataText: 'Local geolocation data is incomplete. Download data from ' + appWeb  + '?',
			missingCoordinatesForPrivHeader: 'missing coordinates for private network',
			missingCoordinatesForPrivText: 'missing coordinates for private network',
			missingCoordinatesForPrivQuestion: 'define it?',
			missingInternationalRulesHeader: 'missing international rules',
			missingInternationalRulesText: 'Missing international rules. Contact your administrator.',
			missingInternationalRulesQuestion: 'Missing international rules. Define it?'
		},
		comboData: {
			'number/number': 'Source number <--> Destination number',
			'number/ip': 'Source number -> Destination IP',
			'ip/number': 'Source IP  <-> Destination number', 
			'ip/ip': 'Source IP <-> Destination IP'
		}
	},
	setting_geoip_customer: {
		column: {
			ip: 'IP address / network',
			lat_lng: 'coordinates',
			country_name: 'country',
			descr: 'description',
			note: 'note'
		},
		field: {
			ip: 'IP address / network',
			mask: 'Network mask',
			latitude_longitude: 'lat/lng',
			latitude: 'latitude',
			longitude: 'longitude',
			country_code: 'country',
			descr: 'description',
			note: 'note'
		},
		title: {
			panel: 'Customer GeoIP',
			ip_network: 'IP address / network'
		}
	},
	setting_customer_country_prefix: {
		column: {
			prefix_regex: 'prefix / regex',
			country_name: 'country',
			advanced_mode: 'adv.mode',
			international_local: 'intern. / local',
			description: 'description'
		},
		field: {
			advanced_mode: 'Advanced mode',
			prefix: 'Prefix',
			country_code: 'Country',
			description: 'Description',
			number_regexp_cond: 'Regex condition',
			number_length_from: 'Length >=',
			number_length_to: 'Length <=',
			trim_prefixes: 'list / regex',
			trim_prefix_length: 'length',
			international_local: 'International / Local'
		},
		title: {
			trim_prefix: 'trim prefixes',
			country_prefixes_rules: 'country prefixes / rules'
		},
		combodata: {
			international: 'international',
			local: 'local'
		}
	},
	'default': {
		column: {
			vat: 'VAT',
			username: 'user name',
			file_name: 'file',
			file_size: 'size'
		},
		field: {
			vat: 'VAT',
			username: 'User name',
			password: 'Password',
			password_old: 'Old password',
			password_new: 'New password',
			password_new_again: 'New password (again)',
			length_interval_minutes: 'Interval [min]',
			secret: '2FA secret'
		},
		field_help: {},
		title: {
			resellers: 'Resellers',
			customers: 'Customers',
			changePassword: 'Change password',
			change2FA: 'Change 2FA',
			passwordExpired_changePassword: 'Password expired - change password',
			setupPassword2FA: 'Two Factor Authentication (2FA) / password settings',
			tcpDump: 'TCP dump',
			userConfiguration: 'User configuration'
		},
		grid: {
			newRec: 'New',
			editRec: 'Edit',
			deleteRec: 'Delete',
			removeRec: 'Remove',
			propertiesRec: 'Properties',
			subject: 'record',
			'export': 'export',
			'import': 'import',
			table: 'table',
			copyToClipboard: 'copy to clipboard',
			actualCell: 'actual cell',
			actualRow: 'actual row',
			selectionRow: 'selection row',
			selectionRows: 'selection rows',
			tableIsEmpty: 'table is empty',
			alertNotAllStoreOkHeader: 'Warning',
			alertNotAllStoreOkText: 'All Stores is not complete',
			quickSearch: 'quick search',
			paginator: 'navigation',
			storeTimeoutHeader: 'request timeout',
			storeTimeoutSimpleText: 'The request timeout.',
			storeTimeoutText: 'The request timeout after {0} seconds. Possible reasons - server is overloaded or not powerful enough to serve the request. The query was:',
			storeTimeoutWithoutQueryText: 'The request timeout after {0} seconds. Possible reasons - server is overloaded or not powerful enough to serve the request.',
			reload: 'reload',
			newIpLookup: 'New IP lookup record',
			addIpLookup: 'Add IP lookup record',
			editIpLookup: 'Edit IP lookup record'
		},
		combo: {
			select: 'select',
			multiselect: 'multiselect',
			selectedItems_clickToRemove: 'selected items - click to remove',
			listOfAvailableItems: 'list of available items'
		},
		needEqPasswordNewAgainText: 'new password again must be the same with new password',
		needDiffPasswordNewOld: 'new password must be different than your old pasword',
		invalidRegularExpression: 'invalid regular expression',
		invalidIP: 'invalid IP',
		ALL: 'ALL',
		LOCAL: 'LOCAL',
		sensor: 'sensor',
		reloadSniffers: 'reload sniffers',
		filters: 'filters',
		search: 'search',
		from: 'from',
		to: 'to',
		dateRange: 'date range',
		utilities: 'utilities',
		appWelcome: '<h2 style="font-size: 12px; color: #555; padding-bottom: 5px; border-bottom: 1px solid #C3D0DF; width: 267px;">' +
			    'Welcome to the {0} interface</h2>',
		serverSideError: 'server side error - check your http server error log.',
		errorIsNotSpecified: 'connection to the web server was lost / interrupted.',
		connectionToServerLost: 'connection to server lost',
		requestTimeout: 'request timeout',
		requestAborted: 'request aborted',
		tryingAgaing: 'trying again',
		timezone: 'timezone',
		timezone_os_short: 'OS',
		clickForShowIt: 'Click for show it',
		selectTimezonesFirst: 'Select timezones on top right of the panel first!',
		timezoneIsRequiredField: 'Timezone is a required field'
	},
	eula: {
		title: 'EULA - ' + applName,
		text: 'Please read this end user license agreement (EULA) before agreeing to accept these terms and conditions. You have to accept EULA to use this software.',
		agreeButton: 'agree',
		doNotAgreeButton: 'do not agree'
	},
	global: {
		helpTitle: 'Help',
		helpMainText: 'Click on the menu bar displays help.',
		saveButtonText: 'Save',
		reloadButtonText: 'Reload',
		okButtonText: 'OK',
		closeButtonText: 'Close',
		continueButtonText: 'Continue',
		sendButtonText: 'Send',
		cancelButtonText: 'Cancel',
		previewButtonText: 'Preview',
		skipButtonText: 'Skip',
		restoreButtonText: 'Restore',
		downloadButtonText: 'Download',
		menuButtonText: 'Menu',
		nextButtonText: 'Next',
		prevButtonText: 'Prev',
		finishButtonText: 'Finish',
		error: 'Error',
		info: 'Info',
		information: 'Information',
		requirefield: 'Required field',
		retry: 'retry',
		OK: 'OK',
		FAIL: 'FAIL',
		processing: 'processing',
		failed: 'failed',

		day0: 'Monday',
		day1: 'Tuesday',
		day2: 'Wednesday',
		day3: 'Thursday',
		day4: 'Friday',
		day5: 'Saturday',
		day6: 'Sunday',

		mon1: 'January',
		mon2: 'February',
		mon3: 'March',
		mon4: 'April',
		mon5: 'May',
		mon6: 'Jun',
		mon7: 'July',
		mon8: 'August',
		mon9: 'September',
		mon10: 'Oktober',
		mon11: 'November',
		mon12: 'December',

		newValue_fieldLabel: 'new value',
		editValue_fieldLabel: 'edit value',
		newValue_title: 'New value',
		editValue_title: 'Edit value',
		
		fileUploadText: 'Select file',
		fileBrowse: 'Browse...',

		confirmText: 'Are you sure?',
		confirmDeleteSingleText: 'Do you really want to delete the highlighted item?',
		confirmDeleteMultipleText: 'Do you really want to delete highlighted items?',
		selectOneOrMoreText:  'First select an item or more items to delete!',

		confirmStopSingleSniffer: 'Do you really want to stop running sniffer?',
		confirmStopMultipleSniffer: 'Do you really want to stop running sniffers?',
		selectOneOrMoreSniffer: 'First select an running sniffer or more running sniffers to stop!',

		confirmRemoveSingleText: 'Do you really want to remove the highlighted item?',
		confirmRemoveMultipleText: 'Do you really want to remove highlighted items?',
		selectOneOrMoreRemoveText:  'First select an item or more items to remove!',

		confirmDeleteTableSingleText: 'Do you really want to delete the selected table?',
		confirmDeleteTableMultipleText: 'Do you really want to delete selected tables?',
		selectOneOrMoreTableText: 'First select a table or more tables to delete!',

		pleaseWait: 'Please wait...',
		longOperationPleaseWait: 'Long operation - please wait...',
		downloadPleaseWait: 'Download - please wait...',
		questionText: 'Question',
		infoText: 'Info',
		warningText: 'Warning',
		errorText: 'Error',
		savingText: 'Saving..',
		uploadingText: 'Uploading..',
		genericResponseErrorText: 'The server requests has failed',
		
		editRecord: 'Edit Record',
		add: 'add',
		remove: 'remove',

		appHasNoPropertiesText: 'This application has no properties.',
		properties: 'Properties',
		warning: 'Warning',
		cannotDeleteItems: 'These items can not be erased',
		confirmDeleteRuleSingleText: 'Do you really want to delete the highlighted item?',
		confirmDeleteRuleMultipleText: 'Do you really want to delete highlighted items?',
		confirmUnlinkRuleSingleText: 'Do you really want to unlink the highlighted item?',
		confirmUnlinkRuleMultipleText: 'Do you really want to unlink the highlighted items?',
		confirmRemovePasswordRuleSingleText: 'Do you really want to remove password from the highlighted item?',
		confirmRemovePasswordRuleMultipleText: 'Do you really want to remove password from the highlighted items?',
		save: 'Save',
		edit: 'Edit',
		deleteText: 'Delete',
		note: 'Note',
		yes: 'Yes',
		no: 'No',
		stop: 'Stop',
		filter: 'filter',

		note: 'Note',
		saveFirstThanEdit: 'First, save the form',
		
		importTitleWindow: 'Import',
		batchEditWinTitle: 'Bulk edit',
		maintitleText: 'Main menu',
		checklist: {
			info: 'Information',
			ipaddress: 'IP adresses',
			iproute: 'Default gateway',
			ipdns: 'DNS',
			ipsmtp: 'SMTP',
			channels: 'Trunk channel settings',
			inroute: 'Incomming routing settings',
			outroute: 'Outgoing routing settings',
			extension: 'Extensions',
			reloadip: 'IP network activation',
			reload: 'Settings activation'
		},
		
		alertAjaxSuccessHeader: 'Success',
		
		alertAjaxErrorHeader: 'Request result',
		alertAjaxErrorMsgUnknown: 'Unknown error',
		
		alertAjaxFailureHeader: 'Request failure',
		alertAjaxFailureMsgWithStatusCode: 'Server side failure with status code: ',
		alertAjaxFailureMsg: 'Server side failure - unknown error',
		
		compatibilityProblem: 'Compatibility problem',
		
		IE_header: 'Compatibility problem',
		IE_msg: 'Internet explorer is not fully supported and you may expirience bad rendering behaviour. We recommend to use another web browser like Google chrome, Firefox, Safari, Opera and others.',
		IE_msg_old: 'Internet explorer is supported from version 11.',
		IE_msg_never_show_again: 'never show again',
		
		emailSent: 'Email sent',
		
		restoreDefault: 'restore default',
		restoreDefaultConfirmHeader: 'restore default values',
		restoreDefaultConfirmText: 'Really?',
		
		msgErrorTitle: 'Error',
		
		msgSaveQuestionTitle: 'Save confirmation',
		msgSaveQuestionText: 'Save changes?',
		
		success: 'success',
		
		clipboard: {
			copyTo: 'copy to clipboard',
			CopyTo: 'Copy to clipboard',
			copyCellTo: 'copy cell to cliboard',
			CopyCellTo: 'Copy cell to cliboard'
		},
		
		reseller: 'reseller',
		resellers: 'resellers',
		customer: 'customer',
		customers: 'customers',
		subsidiary: 'subsidiary',
		subsidiaries: 'subsidiaries',
		
		newCapture: 'new capture',
		stopCapture: 'stop capture',
		stopCaptureConfirmHeader: 'stop capure',
		stopCaptureConfirmText: 'Really?',
		
		tcpdumpDeleteConfirmHeader: 'delete tcpdump capture file(s)',
		tcpdumpDeleteFolderConfirmText: 'delete time folder',
		tcpdumpDeletePcapFileConfirmText: 'delete pcap file',
		tcpdumpDeleteConfirmText: 'Really?',
		
		sensorId: 'sensor id',
		
		areYouSure: 'Are you sure?',
		
		upload_selectFileBtn: 'Select file ...',
		
		callHangedUp: 'call hanged up',
		
		alertCommandNotFoundHeader: 'command {command} not found',
		alertCommandNotFoundText: 'Try:' + 
					'<li style="list-style: disc; margin-left: 20;"><span style="color: blue;">apt-get install {packageAptGet}</span> on Debian or Ubuntu' + 
					'<li style="list-style: disc; margin-left: 20;"><span style="color: blue;">yum install {packageYum}</span> on Red Hat, Cent OS or Fedora',
		alertCommandPermissionDeniedHeader: 'permission denied for run {command}',
		alertCommandPermissionDeniedText: 'Try:' + 
					'<li style="list-style: disc; margin-left: 20;">add suid bit for {command}' + 
					'<li style="list-style: disc; margin-left: 20;">add apache user for {command} into /etc/sudoers',
					
		changeLicenseKey: 'change license key',
		setLicenseToken: 'set license token',
		newKey: 'new key',
		
		licenseInformation: 'license information',
		noLicenseInformation: 'no license information',
		emailForLicenseExpirationAlert: 'send license expiration alert to this email',
		automaticLicenseUpdate: 'automatic license update',
		
		today: 'today',
		yesterday: 'yesterday',
		currentHour: 'current hour',
		month: 'month',
		week: 'week',
		day: 'day',
		days: 'days',
		dayShort: 'd',
		hour: 'hour',
		hours: 'hours',
		hourShort: 'h',
		hourShort2: 'hour',
		minute: 'minute',
		minutes: 'minutes',
		minuteShort: 'm',
		minuteShort2: 'min',
		second: 'second',
		seconds: 'seconds',
		secondShort: 's',
		secondShort2: 'sec',
		milisecond: 'milisecond',
		milisecondShort: 'ms',
		year: 'year',
		last: 'last',
		current: 'current',
		previous: 'previous',
		
		play: 'play',
		pause: 'pause',
		stop: 'stop',
		
		backward_player: 'backward',
		play_player: 'play',
		pause_player: 'pause',
		stop_player: 'stop',
		forward_player: 'forward',
		togglemute_player: 'mute',
		
		errorLoadingWavFile: 'Error loading wav file',
		
		timezoneInformation: 'timezone information',
		serverPhpTimezone: 'server php timezone',
		sensorTimezone: 'sensors timezone',
		sensorTimezoneDisplayText: 'For proper function of the program it is necessary to set the time zone on sensors. In case of multiple sensors you need to set the same time zone on each.',
		recommendedNoSystemDefaultTimezone: 'recommended choosing<br>concrete timezone',
		setTimezone: 'set timezone',
		setSensorTimezone: 'set sensors timezone',
		timezone: 'timezone',
		
		newVersionGuiInformation: 'There is new version of WEB GUI',
		newVersionGuiAvaialable: 'new GUI version available',
		newVersionSnifferAvaialable: 'new sensor version available',
		loadingNewVersionGuiInformationPleaseWait: 'Loading new version changelog - please wait...',
		upgrade: 'upgrade',
		upgradingPleaseWait: 'Upgrading - please wait...',
		upgradingSensorPleaseWait: 'Upgrading sensor {0} - please wait...',
		upgradeGuiQuestion: 'Upgrade GUI to version {0}?',
		changelog: 'changelog',
		
		upgradingSensor: 'upgrading sensor',
		toVersion: 'to version',
		restartingSensor: 'restarting sensor',
		checkSensorsVersions: 'check sensors versions',
		applyNewConfigurationToSensor: 'apply new configuration to sensor',
		
		newVersionHeader: '',
		newVersionText: 'Server application was upgraded - the GUI needs reload to operate correctly.',
		newVersionSnifferText: 'You will be redirected to sensors table where you can upgrade each sensor individually by clicking on upgrade button.',
		
		crashOldVersionHeader: 'Sensor crash detected',
		crashOldVersionText: 'Crash detected on {0}. Your version is not the latest - would you like to upgrade it to the latest now?',
		listSensor: 'sensor: {0}',
		listSensors: 'sensors: {0}',
		
		upgradeSteps: {
			check_system: 'check system',
			check_init_directory: 'check application directory',
			check_license: 'check your license',
			check_files: 'check files privilege in application directory',
			download_upgrade: 'download upgrade file',
			check_unzip_upgrade: 'check unzip upgrade file',
			upgrade: 'upgrade'
		},
		upgradeSnifferByGitSteps: {
			check_git_directory: 'check git directory',
			git_pull: 'call git pull',
			configure: 'call configure',
			make_clean: 'call make clean',
			make: 'call make',
			install: 'call make install'
		},
		youDoNotHavePermissionToEdit: 'You do not have permission to edit',
		clickMe: 'click me',
		mysqlHasCriticalError: 'Your mysql version is buggy and can cause database corruption when upgrading tables with ALTER statements. We recommend to upgrade your MySQL to at least >= 5.5.43 before you proceed with GUI upgrade (through your standard OS packages like yum/apt-get or manually). However this GUI release already contains workaround to not crash old/buggy MySQL versions so you can try the upgrade. <br><br> Would you like to proceed with the upgrade?',
		
		failedDeleteRecord_FK: 'Record is used in table {0}. You must first delete relational records from table {0}.',
		
		wavPlayerError: 'wav player error',
		tryOldPlayer: 'try old player',
		unknown: 'unknown',
		
		notSet: 'not set',

		reload: 'Reload',
		reloading: 'Reloading',
		
		columns: {
			delete_order: 'delete / order',
			and_or_level: 'AND / OR level',
			not: 'not',
			id: 'id'
		},
		
		tooltip: {
			enable: 'enable',
			disable: 'disable',
			moveUp: 'move up',
			moveDown: 'move down',
			edit: 'edit',
			'delete': 'delete',
			increase_and_or_level: 'increase AND / OR level',
			decrease_and_or_level: 'decrease AND / OR level'
		},
		
		checkSnifferVersionTitle: 'check sniffer version',
		checkSnifferVersionTextTooOld: 'Your sniffer version is too old, please upgrade it to the latest version.',
		checkSnifferVersionUpgradeQuestion: 'Run the upgrade now?',
		
		preparingBackupGuiTables: 'preparing backup of gui tables - please wait',
		preparingBackupGuiConfiguration: 'preparing backup of gui configuration - please wait',
		backupGuiConfigTablesTitle: 'Backup GUI configuration tables',
		backupGuiDataTablesTitle: 'Backup GUI data tables',
		backupGuiConfigTablesQuestionRun: 'This option performs backup of the configuration mysql tables.<br>' +
						  '<br>' +
						  '<b>Do you want to start backups now?</b><br>' +
						  '<br>' +
						  '<i>You can also backup / restore via commands:<br>' +
						  '<p>&nbsp;&bull;&nbsp;php php/run.php backupGuiTables -t config -f backup.zip<br>' +
						  '&nbsp;&bull;&nbsp;php php/run.php restoreGuiTables -t config -f backup.zip<br>' +
						  '<p>or with database parameters<br>' +
						  '<p>&nbsp;&bull;&nbsp;php php/run.php backupGuiTables -t config -f backup.zip -h host -u user -p pass -d db' +
						  ' --key=keyfile --cert=certificate --cacert=CAcertificate --capath=CAcertificate_path --ciphers=Ciphers<br>' +
						  '&nbsp;&bull;&nbsp;php php/run.php restoreGuiTables -t config -f backup.zip -h host -u user -p pass -d db' +
						  ' --key=keyfile --cert=certificate --cacert=CAcertificate --capath=CAcertificate_path --ciphers=Ciphers</i>',
		backupGuiDataTablesQuestionRun: 'This option performs backup of the data mysql tables.<br>' +
						'<br>' +
						'<b>Do you want to start backups now?</b><br>' +
						'<br>' +
						'<i>You can also backup / restore via commands:<br>' +
						'<p>&nbsp;&bull;&nbsp;php php/run.php backupGuiTables -t data -f backup.zip<br>' +
						'&nbsp;&bull;&nbsp;php php/run.php restoreGuiTables -t data -f backup.zip<br>' +
						'<p>or with database parameters<br>' +
						'<p>&nbsp;&bull;&nbsp;php php/run.php backupGuiTables -t data -f backup.zip -h host -u user -p pass -d db<br>' +
						' --key=keyfile --cert=certificate --cacert=CAcertificate --capath=CAcertificate_path --ciphers=Ciphers<br>' +
						'&nbsp;&bull;&nbsp;php php/run.php restoreGuiTables -t data -f backup.zip -h host -u user -p pass -d db' +
						' --key=keyfile --cert=certificate --cacert=CAcertificate --capath=CAcertificate_path --ciphers=Ciphers</i>',
		backupGuiConfigurationTitle: 'Backup GUI Configuration Files',
		backupGuiConfigurationQuestionRun: 'This option performs backup of the configuration files.<br>' +
						   '<br>' +
						   '<b>Do you want to start backups now?</b><br>' +
						   '<br>' +
						   '<i>You can also backup / restore via commands:<br>' +
						   '<p>&nbsp;&bull;&nbsp;php php/run.php backupGuiConfigurationFiles -f backup.zip<br>' +
						   '&nbsp;&bull;&nbsp;php php/run.php restoreGuiConfigurationFiles -f backup.zip</i>'
	},
	arrays: {
		LregState_OK: 'REGISTER',
		LregState_Failed: 'failed',
		LregState_UnknownMessageOK: 'unknown message', // OK to unknown message
		LregState_ManyRegMessages: 'too many reg.messages', // to many REGISTER messages within the same callid
		LregState_Expired: 'EXPIRED', // registration expired
		LregState_Unregister: 'UNREGISTER',
		LauditActivity_download_wav: 'download wav',
		LauditActivity_download_pcap: 'download pcap',
		LauditActivity_play_wav: 'play wav',
		LauditActivity_show_fax: 'show fax',
		LauditActivity_batch_download: 'batch download',
		LauditActivity_filterFormCDR: 'filter CDR in form',
		LauditActivity_login: 'login',
		LauditActivity_logout: 'logout',
		LauditActivity_liveSnifferStart: 'Live sniffer start',
		LauditActivity_liveSnifferStop: 'Live sniffer stop',
		LemailAlertType_RTP: 'RTP & CDR',
		LemailAlertType_SIP_response: 'SIP Response',
		LemailAlertType_ReasonSipQ850: 'Reason SIP / Q.850',
		LemailAlertType_CPS: 'CPS',
		LemailAlertType_DSCP: 'DSCP',
		LemailAlertType_CALL_TIMEDOUT: 'Call Timeout',
		LemailAlertType_ASR: 'ASR',
		LemailAlertType_NER: 'NER',
		LemailAlertType_ACD: 'ACD',
		LemailAlertType_InternalProxyError: 'Internal Proxy Error',
		LemailAlertType_TimeWithoutCall: 'Time without call',
		LemailAlertType_ConcurrentCalls: 'Concurrent calls',
		LemailAlertType_Sensors: 'Sensors',
		LemailAlertType_Fraud_RCC: 'Fraud: realtime concurrent calls',
		LemailAlertType_Fraud_CHC: 'Fraud: change cdr country',
		LemailAlertType_Fraud_CHCR: 'Fraud: change register country',
		LemailAlertType_Fraud_D: 'Fraud: country/continent destination',
		LemailAlertType_Fraud_SPC: 'Fraud: SIP PACKETS flood / attack',
		LemailAlertType_Fraud_RC: 'Fraud: SIP REGISTER flood / attack',
		LemailAlertType_Fraud_Seq: 'Fraud: SEQUENTIAL',
		LemailAlertType_Fraud_BilingOverQuota: 'Watchdog: billing over quota',
		LemailAlertType_Fraud_BilingHighRate: 'Watchdog: billing high rate',
		LemailAlertType_Register_check_active: 'SIP is active REGISTER (beta)',
		LemailAlertType_Register_unreg: 'SIP unREGISTER (beta)',
		LemailAlertType_Register_failed: 'SIP failed REGISTER (beta)',
		LemailAlertType_Register_ua: 'SIP REGISTER user agent (beta)',
		LemailAlertType_Register_short: 'SIP short REGISTRATION (beta)',
		LemailAlertType_Register_mult: 'SIP multiple REGISTER (beta)',
		LemailAlertType_Register_expire: 'SIP REGISTER expire (beta)',
		LemailAlertType_Register_rrd: 'SIP REGISTER RRD (beta)',
		LemailAlertType_SipMsg_qualify: 'SIP Opt/Subsc/Notify Qualify',
		LemailAlertType_RTP_descr: 'Alerts based on RTP metrics or CDR details.',
		LemailAlertType_SIP_response_descr: 'Alerts based on SIP Response like 503 etc.',
		LemailAlertType_ReasonSipQ850_descr: 'Alerts based on Reason SIP or Q.850.',
		LemailAlertType_CPS_descr: 'Calls Per Second or CPS refers to how many telephone calls can be handled in a second. CPS is one measure of the performance of Switching systems. This alert is useful for fraud alerts or switch malfunction',
		LemailAlertType_DSCP_descr: 'Differentiated services or DiffServ is a computer networking architecture that specifies a simple, scalable and coarse-grained mechanism for classifying and managing network traffic and providing quality of service (QoS) on modern IP networks. DiffServ uses a 6-bit differentiated services code point (DSCP) in the 8-bit Differentiated services Field (DS field) in the IP header for packet classification purposes. This alert can be used to check if SIP or RTP uses desired DSCP',
		LemailAlertType_CALL_TIMEDOUT_descr: 'Alerts based on calls which timed-out by the internal timer like absolute timeout (default 4 hours) or timeout due to sudden RTP stop etc.',
		LemailAlertType_TimeWithoutCall_descr: 'Alert monitors the time without any call. It can point to a global problem.',
		LemailAlertType_ConcurrentCalls_descr: 'Alert monitors the count of the concurrent calls.',
		LemailAlertType_ASR_descr: 'The answer-seizure ratio (ASR) is a measurement of network quality and call success rates in telecommunications. It is the percentage of answered telephone calls with respect to the total call volume.',
		LemailAlertType_NER_descr: 'NER has been proposed as an addition to ITU E.411. It is designed to eliminate user behaviour as factor and better represent pure network performance. Its calculated as: (Answers + User Busy + Ring No Answer + Terminal Rejects) / Total call attempts (seizures)',
		LemailAlertType_ACD_descr: 'Alerts based on Average Call Duration.',
		LemailAlertType_InternalProxyError_descr: 'This report searches for calls which did not passed through SIP proxy with some error code. Example - customer called to some destination through SIP proxy which throw error sip respone code 5XX without trying to proxy the call ie. because of database error or any other errors. The way it searches such cases are that it walks all CDR with error response code 5XX (or that one you set) and tryes to search second leg based on SIP custom header (like X-Call-ID) which has the value of Call-ID from original call. It means that you need to support this feature on your SBC/Proxy and define the custom header in GUI->settings->CDR custom headers.',
		LemailAlertType_Sensors_descr: 'Alerts based on sensors metrics like total memory used etc.',
		LemailAlertType_Fraud_RCC_descr: 'This anti-fraud rule (and the purpose is not only for fraud) works in realtime and it is not based on CDR. It tracks each source IP and count number of concurrent call. The advantage of tracking concurrent calls in realtime and not based on CDR is obvious and it helps to compete attacks which creates many channels at the same time with long duration. ',
		LemailAlertType_Fraud_CHC_descr: 'Alert is triggered when the last CDR changes IP source which is in different country or continent since last call. ',
		LemailAlertType_Fraud_CHCR_descr: 'Alert is triggered when the last SIP REGISTRATION for some username changes country or continent since last successful registration.',
		LemailAlertType_Fraud_D_descr: 'Alert is triggered when someone is calling to specific country or continent. This alert is based on first SIP INVITE and not from CDR thus it works in realtime.',
		LemailAlertType_Fraud_SPC_descr: 'Alert is triggered when sniffer detects >= N number of any SIP packets from some IP during set interval.',
		LemailAlertType_Fraud_RC_descr: 'Alert is triggered when sniffer detects >= N number of REGISTER SIP packets from some IP during set interval.',
		LemailAlertType_Fraud_Seq_descr: 'Alert is triggered when sniffer detects >= N number of the calls from specific caller ips to the specific called numbers.',
		LemailAlertType_Fraud_BilingOverQuota_descr: 'Alert is triggered when billing is over set quota',
		LemailAlertType_Fraud_BilingHighRate_descr: 'Alert is triggered when destination costs more then set value',
		LemailAlertType_Register_check_active_descr: 'Alert will be sent if number of total active registrations are below set number or above set number. You can set only min or only max value. You can set individual min/max numbers for various filter criteria.',
		LemailAlertType_Register_unreg_desr: 'Alert will be sent once active registration (phone/pbx) is not registered for specified number of seconds. It will NOT alert if sensor does not know about the registration yet or if device never registers.',
		LemailAlertType_Register_failed_desr: 'Allert will be sent once number of failed SIP registrations exceed specified number during period (5 mintues default). If no filter is set it will count any SIP registration fail.',
		LemailAlertType_Register_ua_desr: 'Alert will be sent once number of SIP registerations with specified user-agent filter reach or exceeds spcified limit during period.',
		LemailAlertType_Register_short_desr: 'Alert will be sent once some device registers and unregisters within specified limit (for example if some device registers for 10 seconds only).  You can also set how many of those short registrations will be within spcified interval to trigger the alert.',
		LemailAlertType_Register_mult_desr: 'Alert will be sent once more than one device registers with the same number.',
		LemailAlertType_Register_expire_desr: 'Alert will be sent once number of expired registrations will exceed specified number. This is useful for watching multiple expired registrations which might signalize faulty SIP proxy / network etc.',
		LemailAlertType_Register_rrd_desr: 'Alert will be sent once Registration Request Delay exceeds threshold. Registration Request Delay is number of seconds between first SIP REGISTER to succesfull 200 OK. Ideally this should be <= 1 second and if it is more it can signalize problems on registration proxy/pbx (overload / db / network issues).',
		LemailAlertType_SipMsg_qualify_descr: '',
		LemailDailyReportType_RTP: 'RTP',
		LemailDailyReportType_ProxyDegradMOS: 'Proxy MOS degradation',
		LemailDailyReportType_CdrSummary: 'CDR Summary',
		LemailDailyReportType_ConcurrentCallStat: 'Concurrent Calls',
		LemailDailyReportType_Chart: 'Charts',
		LemailDailyReportType_ConcurrentCallStat_license_chart: 'Concurrent Calls - license chart',
		LfileFormat_Image_Svg: 'SVG',
		LfileFormat_Image_Png: 'PNG',
		LcdrFieldsCaller: 'caller',
		LcdrFieldsCalled: 'called',
		LcdrFieldsSipIpSrc: 'SIP src IP',
		LcdrFieldsSipIpDst: 'SIP dst IP',
		LcdrFieldsRtpIpSrc: 'RTP src IP',
		LcdrFieldsRtpIpDst: 'RTP dst IP',
		LcdrSideSrc: 'source (caller)',
		LcdrSideDst: 'destination (called)',
		LcdrSideBoth: 'both',
		LsideCaller: 'caller',
		LsideCalled: 'called',
		Ltype_IpOrNumber_ip: 'IP',
		Ltype_IpOrNumber_number: 'number',
		LsipMsg_OPTIONS: 'OPTIONS',
		LsipMsg_SUBSCRIBE: 'SUBSCRIBE',
		LsipMsg_NOTIFY: 'NOTIFY',
		LreqRespDirection_request: 'request',
		LreqRespDirection_response: 'response',
		LreqRespDirection_both: 'both',
		LtypeFraudAlertRule_src_ip__blacklist: 'src IP - blacklist',
		LtypeFraudAlertRule_src_ip__blacklist_countries: 'src IP - country blacklist',
		LtypeFraudAlertRule_src_ip__blacklist_area: 'src IP - area blacklist item',
		LtypeFraudAlertRule_src_ip__change: 'src IP - change',
		LtypeFraudAlertRule_ua__blacklist: 'user agent - blacklist item',
		LtypeFraudAlertRule_dst_num__blacklist: 'dst number - blacklist',
		LtypeFraudAlertRule_dst_num__blacklist_countries: 'dst number - country blacklist',
		LtypeFraudAlertRule_dst_num__blacklist_area: 'dst number - contry blacklist',
		LtypeFraudAlertRule_price__per_call: 'dst number - area blacklist item',
		LtypeFraudAlertRule_price__during_interval: 'price during interval',
		LtypeFraudAlertRule_same_number: 'same number',
		LtypeFraudAlertRule_international_number_limit: 'international number limit',
		LtypeFraudAlertRule_concurrent_calls: 'concurrent calls',
		LIntervalFraudAlertRule_1min: '1 minute',
		LIntervalFraudAlertRule_5min: '5 minutes',
		LIntervalFraudAlertRule_15min: '15 minutes',
		LIntervalFraudAlertRule_hour: 'hour',
		LIntervalFraudAlertRule_day: 'day',
		LIntervalFraudAlertRule_week: 'week',
		LIntervalFraudAlertRule_month: 'month',
		LRegisterAlertListType_none: 'none',
		LRegisterAlertListType_ip_ua: 'IP, UA',
		LcdrGroupBy_sipUsers: 'users',
		LcdrGroupBy_sipIP: 'sip IP',
		LcdrGroupBy_codecs: 'codecs',
		LcdrGroupBy_sipResponse: 'last sip response',
		LcdrGroupBy_sipResponse_bye_code: 'last sip response / bye code',
		LcdrGroupBy_reasonSip: 'reason SIP',
		LcdrGroupBy_reasonQ850: 'reason Q.850',
		LcdrGroupBy_ipGroup: 'IP group',
		LcdrGroupBy_ua: 'user agent',
		LcdrGroupBy_country_number: 'country by caller / called number',
		LcdrGroupBy_country_caller: 'country by caller number',
		LcdrGroupBy_country_called: 'country by called number',
		LcdrGroupBy_country_sip: 'country by SIP source / dest. IP',
		LcdrGroupBy_sipcallerip: 'country by SIP source IP',
		LcdrGroupBy_sipcalledip: 'country by SIP destination IP',
		LmessageGroupBy_sipResponse: 'last sip response',
		LmessageGroupBy_sipIP: 'sip IP',
		LmessageGroupBy_ipGroup: 'IP group',
		LmessageGroupBy_country_number: 'country by caller / called number',
		LmessageGroupBy_country_caller: 'country by caller number',
		LmessageGroupBy_country_called: 'country by called number',
		LmessageGroupBy_country_sip: 'country by SIP source / dest. IP',
		LmessageGroupBy_sipcallerip: 'country by SIP source IP',
		LmessageGroupBy_sipcalledip: 'country by SIP destination IP',
		LtrackerStatusType_Open: 'open',
		LtrackerStatusType_Closed: 'closed',
		LtrackerPriotity_1: 'very low',
		LtrackerPriotity_2: 'low',
		LtrackerPriotity_3: 'normal',
		LtrackerPriotity_4: 'high',
		LtrackerPriotity_5: 'very high',
		LtimeInterval_minute: 'minute',
		LtimeInterval_5minutes: '5 minutes',
		LtimeInterval_last_5minutes: 'last 5 minutes',
		LtimeInterval_last_15minutes: 'last 15 minutes',
		LtimeInterval_last_30minutes: 'last 30 minutes',
		LtimeInterval_last_60minutes: 'last 60 minutes',
		LtimeInterval_last_120minutes: 'last 120 minutes',
		LtimeInterval_last_180minutes: 'last 180 minutes',
		LtimeInterval_quarter: 'quarter',
		LtimeInterval_hour: 'hour',
		LtimeInterval_this_hour: 'this hour',
		LtimeInterval_last_2hours: 'last 2 hours',
		LtimeInterval_last_3hours: 'last 3 hours',
		LtimeInterval_last_6hours: 'last 6 hours',
		LtimeInterval_last_12hours: 'last 12 hours',
		LtimeInterval_last_24hours: 'last 24 hours',
		LtimeInterval_last_48hours: 'last 48 hours',
		LtimeInterval_last_72hours: 'last 72 hours',
		LtimeInterval_day: 'day',
		LtimeInterval_this_day: 'this day',
		LtimeInterval_last_2days: 'last 2 days',
		LtimeInterval_last_3days: 'last 3 days',
		LtimeInterval_last_7days: 'last 7 days',
		LtimeInterval_last_8days: 'last 8 days',
		LtimeInterval_last_30days: 'last 30 days',
		LtimeInterval_last_60days: 'last 60 days',
		LtimeInterval_last_120days: 'last 120 days',
		LtimeInterval_last_180days: 'last 180 days',
		LtimeInterval_last_360days: 'last 360 days',
		LtimeInterval_week_from_monday: 'week from monday',
		LtimeInterval_week_from_sunday: 'week from sunday',
		LtimeInterval_this_week_from_monday: 'this week from monday',
		LtimeInterval_this_week_from_sunday: 'this week from sunday',
		LtimeInterval_week: 'week',
		LtimeInterval_last_week: 'last week',
		LtimeInterval_month: 'month',
		LtimeInterval_last_month: 'last month',
		LtimeInterval_year: 'year',
		LtimeInterval_last_year: 'last year',
		LtimeInterval_last_hour: 'last hour',
		LtimeInterval_last_2h: 'last 2 hours',
		LtimeInterval_last_3h: 'last 3 hours',
		LtimeInterval_last_8h: 'last 8 hours',
		LtimeInterval_last_24h: 'last 24 hours',
		LtimeInterval_last_2d: 'last 2 days',
		LtimeInterval_last_3d: 'last 3 days',
		LtimeInterval_last_7d: 'last 7 days',
		LtimeInterval_last_8d: 'last 8 days',
		LtimeInterval_last_30d: 'last 30 days',
		LtimeInterval_last_60d: 'last 60 days',
		LtimeInterval_last_90d: 'last 90 days',
		LtimeInterval_this_hour: 'this hour',
		LtimeInterval_today: 'today',
		LtimeInterval_yesterday: 'yesterday',
		LtimeInterval_this_week_from_monday: 'this week from monday',
		LtimeInterval_this_week_from_sunday: 'this week from sunday',
		LtimeInterval_this_month: 'this month',
		LtimeInterval_prev_month: 'previous month',
		LtimeInterval_past_interval_by_schedule_every: 'by schedule (every)',
		LtimeInterval_past_hour: 'past hour',
		LtimeInterval_past_2_hours: 'past 2 hours',
		LtimeInterval_past_3_hours: 'past 3 hours',
		LtimeInterval_past_8_hours: 'past 8 hours',
		LtimeInterval_past_day: 'past day',
		LtimeInterval_past_2_days: 'past 2 days',
		LtimeInterval_past_3_days: 'past 3 days',
		LtimeInterval_past_month: 'past month',
		LtimeInterval_custom: 'custom',
		LtypeChart_TCH_count: 'number of calls',
		LtypeChart_TCH_count_messages: 'number of messages',
		LtypeChart_TCH_count_sip_msg: 'number of opt., subsc., notify',
		LtypeChart_TCH_cps: 'calls per sec.',
		LtypeChart_TCH_cps_messages: 'messages per sec.',
		LtypeChart_TCH_cps_sip_msg: 'opt., subsc., notify per sec.',
		LtypeChart_TCH_minutes: 'minutes',
		LtypeChart_TCH_mos_intervals: 'MOS - intervals',
		LtypeChart_TCH_mos: 'MOS min(both)',
		LtypeChart_TCH_mos_caller_intervals: 'MOS Caller - intervals',
		LtypeChart_TCH_mos_caller: 'MOS Caller',
		LtypeChart_TCH_mos_called_intervals: 'MOS Called - intervals',
		LtypeChart_TCH_mos_called: 'MOS Called',
		LtypeChart_TCH_mos_xr_avg_intervals: 'MOS XR avg - intervals',
		LtypeChart_TCH_mos_xr_avg: 'MOS XR avg',
		LtypeChart_TCH_mos_xr_avg_caller: 'MOS XR avg Caller',
		LtypeChart_TCH_mos_xr_avg_called: 'MOS XR avg Called',
		LtypeChart_TCH_mos_xr_min_intervals: 'MOS XR min - intervals',
		LtypeChart_TCH_mos_xr_min: 'MOS XR min',
		LtypeChart_TCH_mos_xr_min_caller: 'MOS XR min Caller',
		LtypeChart_TCH_mos_xr_min_called: 'MOS XR min Called',
		LtypeChart_TCH_mos_silence_avg_intervals: 'MOS Silence avg - intervals',
		LtypeChart_TCH_mos_silence_avg: 'MOS Silence avg',
		LtypeChart_TCH_mos_silence_avg_caller: 'MOS Silence avg Caller',
		LtypeChart_TCH_mos_silence_avg_called: 'MOS Silence avg Called',
		LtypeChart_TCH_mos_silence_min_intervals: 'MOS Silence min - intervals',
		LtypeChart_TCH_mos_silence_min: 'MOS Silence min',
		LtypeChart_TCH_mos_silence_min_caller: 'MOS Silence min Caller',
		LtypeChart_TCH_mos_silence_min_called: 'MOS Silence min Called',
		LtypeChart_TCH_mos_lqo_caller: 'MOS LQO Caller',
		LtypeChart_TCH_mos_lqo_called: 'MOS LQO Called',
		LtypeChart_TCH_packet_lost_intervals: 'packet loss - intervals',
		LtypeChart_TCH_packet_lost_caller_intervals: 'packet loss - caller - intervals',
		LtypeChart_TCH_packet_lost_called_intervals: 'packet loss - called - intervals',
		LtypeChart_TCH_packet_lost: 'packet loss',
		LtypeChart_TCH_jitter_intervals: 'jitter - intervals',
		LtypeChart_TCH_jitter: 'jitter',
		LtypeChart_TCH_delay: 'delay',
		LtypeChart_TCH_delay_avg: 'x̄ PDV',
		LtypeChart_TCH_rtcp_avgjitter_intervals: 'rtcp avg jitter - intervals',
		LtypeChart_TCH_rtcp_avgjitter: 'rtcp avg jitter',
		LtypeChart_TCH_rtcp_maxjitter_intervals: 'rtcp max jitter - intervals',
		LtypeChart_TCH_rtcp_maxjitter: 'rtcp max jitter',
		LtypeChart_TCH_rtcp_avgfr_intervals: 'rtcp avg fr - intervals',
		LtypeChart_TCH_rtcp_avgfr: 'rtcp avg fr',
		LtypeChart_TCH_rtcp_maxfr_intervals: 'rtcp max fr - intervals',
		LtypeChart_TCH_rtcp_maxfr: 'rtcp max fr',
		LtypeChart_TCH_rtcp_avgrtd_intervals: 'rtcp avg rtd - intervals',
		LtypeChart_TCH_rtcp_avgrtd: 'rtcp avg rtd',
		LtypeChart_TCH_rtcp_maxrtd_intervals: 'rtcp max rtd - intervals',
		LtypeChart_TCH_rtcp_maxrtd: 'rtcp max rtd',
		LtypeChart_TCH_acd_avg: 'ACD - average',
		LtypeChart_TCH_acd: 'ACD - immediate',
		LtypeChart_TCH_asr_avg: 'ASR - average',
		LtypeChart_TCH_asr: 'ASR - immediate',
		LtypeChart_TCH_ner_avg: 'NER - average',
		LtypeChart_TCH_ner: 'NER - immediate',
		LtypeChart_TCH_pdd_intervals: 'PDD - intervals',
		LtypeChart_TCH_pdd: 'PDD',
		LtypeChart_TCH_sipResp: 'SIP responses - typical',
		LtypeChart_TCH_sipResponse: 'SIP responses - all',
		LtypeChart_TCH_sipResponse_base: 'SIP responses Xxx - all',
		LtypeChart_TCH_codecs: 'codecs - all',
		LtypeChart_TCH_IP_src: 'TOP source IPs',
		LtypeChart_TCH_IP_dst: 'TOP dest IPs',
		LtypeChart_TCH_domain_src: 'TOP source SIP domains',
		LtypeChart_TCH_domain_dst: 'TOP dest SIP domains',
		LtypeChart_TCH_silence: 'silence max(both)',
		LtypeChart_TCH_silence_caller: 'silence caller',
		LtypeChart_TCH_silence_called: 'silence called',
		LtypeChart_TCH_silence_end: 'last silence max(both)',
		LtypeChart_TCH_silence_end_caller: 'last silence caller',
		LtypeChart_TCH_silence_end_called: 'last silence called',
		LtypeChart_TCH_clipping: 'clipped frames max(both)',
		LtypeChart_TCH_clipping_caller: 'clipped frames caller',
		LtypeChart_TCH_clipping_called: 'clipped frames called',
		LtypeChart_TCH_custom: 'customize',
		LtypeSeries_TCHS_count: '# of calls',
		LtypeSeries_TCHS_concurrent: '# of concurrent calls',
		LtypeSeries_TCHS_perc_count: '% of calls',
		LtypeSeries_TCHS_count_messages: '# of messages',
		LtypeSeries_TCHS_count_sip_msg: '# of opt., subsc., notify',
		LtypeSeries_TCHS_cps: 'calls per sec.',
		LtypeSeries_TCHS_cps_messages: 'messages per sec.',
		LtypeSeries_TCHS_cps_sip_msg: 'opt., subsc., notify per sec.',
		LtypeSeries_TCHS_minutes: 'minutes',
		LtypeSeries_TCHS_mos: 'MOS min(both)',
		LtypeSeries_TCHS_mos_caller: 'MOS Caller',
		LtypeSeries_TCHS_mos_called: 'MOS Called',
		LtypeSeries_TCHS_mos_xr_avg: 'MOS XR avg (both)',
		LtypeSeries_TCHS_mos_xr_avg_caller: 'MOS XR avg Caller',
		LtypeSeries_TCHS_mos_xr_avg_called: 'MOS XR avg Called',
		LtypeSeries_TCHS_mos_xr_min: 'MOS XR min (both)',
		LtypeSeries_TCHS_mos_xr_min_caller: 'MOS XR min Caller',
		LtypeSeries_TCHS_mos_xr_min_called: 'MOS XR min Called',
		LtypeSeries_TCHS_mos_silence_avg: 'MOS Silence avg (both)',
		LtypeSeries_TCHS_mos_silence_avg_caller: 'MOS Silence avg Caller',
		LtypeSeries_TCHS_mos_silence_avg_called: 'MOS Silence avg Called',
		LtypeSeries_TCHS_mos_silence_min: 'MOS Silence min (both)',
		LtypeSeries_TCHS_mos_silence_min_caller: 'MOS Silence min Caller',
		LtypeSeries_TCHS_mos_silence_min_called: 'MOS Silence min Called',
		LtypeSeries_TCHS_mos_lqo_caller: 'MOS LQO Caller',
		LtypeSeries_TCHS_mos_lqo_called: 'MOS LQO Called',
		LtypeSeries_TCHS_packet_lost: 'packet loss',
		LtypeSeries_TCHS_packet_lost_caller: 'packet loss - caller',
		LtypeSeries_TCHS_packet_lost_called: 'packet loss - called',
		LtypeSeries_TCHS_jitter: 'jitter',
		LtypeSeries_TCHS_delay: 'delay',
		LtypeSeries_TCHS_delay_avg: 'x̄ PDV',
		LtypeSeries_TCHS_rtcp_avgjitter: 'rtcp avg jitter',
		LtypeSeries_TCHS_rtcp_maxjitter: 'rtcp max jitter',
		LtypeSeries_TCHS_rtcp_avgfr: 'rtcp avg fr',
		LtypeSeries_TCHS_rtcp_maxfr: 'rtcp max fr',
		LtypeSeries_TCHS_rtcp_avgrtd: 'rtcp avg rtd',
		LtypeSeries_TCHS_rtcp_maxrtd: 'rtcp max rtd',
		LtypeSeries_TCHS_acd_avg: 'ACD - average',
		LtypeSeries_TCHS_acd: 'ACD - immediate',
		LtypeSeries_TCHS_asr_avg: 'ASR - average',
		LtypeSeries_TCHS_asr: 'ASR',
		LtypeSeries_TCHS_ner_avg: 'NER - average',
		LtypeSeries_TCHS_ner: 'NER',
		LtypeSeries_TCHS_pdd: 'PDD',
		LtypeSeries_TCHS_sipResp: 'SIP response',
		LtypeSeries_TCHS_sipResponse: 'SIP responses',
		LtypeSeries_TCHS_sipResponse_base: 'SIP responses Xxx',
		LtypeSeries_TCHS_codecs: 'codecs',
		LtypeSeries_TCHS_IP_src: 'TOP source IPs',
		LtypeSeries_TCHS_IP_dst: 'TOP dest IPs',
		LtypeSeries_TCHS_domain_src: 'TOP source SIP domains',
		LtypeSeries_TCHS_domain_dst: 'TOP dest SIP domains',
		LtypeSeries_TCHS_silence: 'silence max(both)',
		LtypeSeries_TCHS_silence_caller: 'silence caller',
		LtypeSeries_TCHS_silence_called: 'silence called',
		LtypeSeries_TCHS_silence_end: 'last silence max(both)',
		LtypeSeries_TCHS_silence_end_caller: 'last silence caller',
		LtypeSeries_TCHS_silence_end_called: 'last silence called',
		LtypeSeries_TCHS_clipping: 'clipped fr. max(both)',
		LtypeSeries_TCHS_clipping_caller: 'clipped frames caller',
		LtypeSeries_TCHS_clipping_called: 'clipped frames called',
		LsubtypeSeries_TCHS_all: 'total',
		LsubtypeSeries_TCHS_max: 'max',
		LsubtypeSeries_TCHS_avg: 'avg',
		LsubtypeSeries_TCHS_min: 'min',
		LsubtypeSeries_TCHS_count_perc_short_60: '<60s',
		LsubtypeSeries_TCHS_count_perc_short_20: '<20s',
		LsubtypeSeries_TCHS_perc95: '%95',
		LsubtypeSeries_TCHS_perc99: '%99',
		LsubtypeSeries_TCHS_intervals: 'intervals',
		LtimeAxis_TA_SECONDS: 'seconds',
		LtimeAxis_TA_MINUTES: 'minutes',
		LtimeAxis_TA_MINUTES_FROM_ACT: 'minutes from act',
		LtimeAxis_TA_5MINUTES: '5 minutes',
		LtimeAxis_TA_10MINUTES: '10 minutes',
		LtimeAxis_TA_QUARTER: 'quarter',
		LtimeAxis_TA_QUARTER_FROM_ACT: 'quarter from act',
		LtimeAxis_TA_HOURS: 'hours',
		LtimeAxis_TA_HOURS_FROM_ACT: 'hours from act',
		LtimeAxis_TA_2HOURS: '2 hours',
		LtimeAxis_TA_2HOURS_FROM_ACT: '2 hours from act',
		LtimeAxis_TA_DAYS: 'days',
		LtimeAxis_TA_DAYS_FROM_ACT: 'days from act',
		LtimeAxis_TA_WEEKS: 'weeks from monday',
		LtimeAxis_TA_WEEKS_FROM_SUNDAY: 'weeks from sunday',
		LtimeAxis_TA_WEEKS_FROM_ACT: 'weeks from act',
		LtimeAxis_TA_MONTHS: 'months',
		LtimeAxis_TA_MONTHS_FROM_ACT: 'months from act',
		LtimeAxis_TA_YEARS: 'years',
		LtimeAxis_TA_YEARS_FROM_ACT: 'years from act',
		LchartTheme_CdrChart: 'base theme',
		LchartTheme_CdrChartLine: 'lines',
		LchartTheme_CdrChartColumn: 'column',
		LchartTheme_CdrChartLineWithGreySum: 'lines (first grey)',
		LchartTheme_CdrChartArea: 'area',
		LchartLegendPosition_top: 'top',
		LchartLegendPosition_bottom: 'bottom',
		LchartLegendPosition_left: 'left',
		LchartLegendPosition_right: 'right',
		LchartLegendPosition_none: 'none',
		Lsunday: 'sunday',
		Lmonday: 'monday',
		Ltuesday: 'tuesday',
		Lwednesday: 'wednesday',
		Lthursday: 'thursday',
		Lfriday: 'friday',
		Lsaturday: 'saturday',
		LcrontabType_alert: 'alert',
		LcrontabType_report: 'report',
		LcrontabType_create_csv_cdr: 'create csv : CDR',
		LcrontabType_create_csv_message: 'create csv : MESSAGES',
		LcrontabType_create_csv_reg: 'create csv : REG',
		LcrontabTypeAt_every: 'every',
		LcrontabTypeAt_at: 'at',
		LcustomCleaningType_cleaning_cdr: 'CDR',
		LcustomCleaningType_cleaning_message: 'MESSAGES',
		LscreenPopupOn_183x180: '183/180',
		LscreenPopupOn_200: '200',
		LscreenPopupOn_183x180_200: '183/180 and 200',
		LcountryOrContinent_country: 'country',
		LcountryOrContinent_continent: 'continent',
		LarSendAlertReportIf_match: 'criteria match',
		LarSendAlertReportIf_no_match: 'no criteria match',
		LarSendAlertReportIf_both: 'both case',
		LarTypeHoliday_fixed: 'fixed',
		LarTypeHoliday_movable: 'movable',
		LarTypeHoliday_easter_monday: 'easter monday',
		LarTypeHoliday_easter_friday: 'easter friday',
		LsensorGraphsRRD_calls: "number of calls",
		LsensorGraphsRRD_heap: "buffer usage",
		LsensorGraphsRRD_SQLq: "sql queue",
		LsensorGraphsRRD_SQLf: "sql cache files",
		LsensorGraphsRRD_tCPU: "cpu usage",
		LsensorGraphsRRD_memusage: "memory usage",
		LsensorGraphsRRD_loadavg: "load averages",
		LsensorGraphsRRD_PS: "packet counter",
		LsensorGraphsRRD_PSS: "SIP packets counter",
		LsensorGraphsRRD_PSR: "RTP packets counter",
		LsensorGraphsRRD_PSSR: "SIP register packet counter",
		LsensorGraphsRRD_PSSM: "SIP message packet counter",
		LsensorGraphsRRD_PSA: "all packets counter",
		LsensorGraphsRRD_PSC: "calls counter",
		LsensorGraphsRRD_speed: "network throughput",
		LsensorGraphsRRD_drop: "packet drops",
		LsensorGraphsRRD_tacCPU: "zip compression",
		LarChart3D_rtp_stat_mosf1_min: 'mos f1 min',
		LarChart3D_rtp_stat_mosf1_avg: 'mos f1 avg',
		LarChart3D_rtp_stat_mosf2_min: 'mos f2 min',
		LarChart3D_rtp_stat_mosf2_avg: 'mos f2 avg',
		LarChart3D_rtp_stat_mosAD_min: 'mos adapt min',
		LarChart3D_rtp_stat_mosAD_avg: 'mos adapt avg',
		LarChart3D_rtp_stat_jitter_max: 'jitter max',
		LarChart3D_rtp_stat_jitter_avg: 'jitter avg',
		LarChart3D_rtp_stat_loss_max: 'loss max', 
		LarChart3D_rtp_stat_loss_avg: 'loss avg',
		LarChart3D_rtp_stat_mosf1_min_pretty: 'MOS Fixed 50ms MIN',
		LarChart3D_rtp_stat_mosf1_avg_pretty: 'MOS Fixed 50ms AVG',
		LarChart3D_rtp_stat_mosf2_min_pretty: 'MOS Fixed 200ms MIN',
		LarChart3D_rtp_stat_mosf2_avg_pretty: 'MOS Fixed 200ms AVG',
		LarChart3D_rtp_stat_mosAD_min_pretty: 'MOS Adaptive 500ms MIN',
		LarChart3D_rtp_stat_mosAD_avg_pretty: 'MOS Adaptive 500ms AVG',
		LarChart3D_rtp_stat_jitter_max_pretty: 'Jitter MAX',
		LarChart3D_rtp_stat_jitter_avg_pretty: 'Jitter AVG',
		LarChart3D_rtp_stat_loss_max_pretty: 'Packet loss MAX', 
		LarChart3D_rtp_stat_loss_avg_pretty: 'Packet loss AVG',
		LarCdrCustomHeadersSpecialType_max_length_sip_data: 'max. length sip data',
		LarCdrCustomHeadersSpecialType_max_length_sip_packet: 'max. length sip packet',
		LarCdrCustomHeadersSpecialType_max_retransmission_invite: 'max. retransmission invite',
		LarMessageCustomHeadersSpecialType_gsm_dcs: 'GSM - DCS',
		LarMessageCustomHeadersSpecialType_gsm_voicemail: 'GSM - Voicemail',
		LarMessageCustomHeadersSpecialType_max_length_sip_data: 'max. length sip data',
		LarMessageCustomHeadersSpecialType_max_length_sip_packet: 'max. length sip packet',
		LarLogSensorType_debug: 'debug',
		LarLogSensorType_info: 'info',
		LarLogSensorType_notice: 'notice',
		LarLogSensorType_warning: 'warning',
		LarLogSensorType_error: 'error',
		LarLogSensorType_critical: 'critical',
		LarLogSensorType_alert: 'alert',
		LarLogSensorType_emergency: 'emergency',
		LarSs7State_call_setup: 'call setup',
		LarSs7State_in_call: 'in call',
		LarSs7State_completed: 'completed',
		LarSs7State_rejected: 'rejected',
		LarSs7State_canceled: 'canceled'
	}
};

function _findLangS(subsystem, typeItem, nameItem, strict) {
	if(typeItem && !nameItem) {
		nameItem = typeItem;
		typeItem = null;
	}
	return(subsystem && langS[subsystem] && langS[subsystem][typeItem] && langS[subsystem][typeItem][nameItem] ||
	       strict != 2 && subsystem && langS[subsystem] && langS[subsystem][nameItem] ||
	       !strict && langS['default'][typeItem] && langS['default'][typeItem][nameItem] ||
	       !strict && langS['default'][nameItem]);
}

function findLangS(subsystem, typeItem, nameItem, strict) {
	var rslt;
	if(Ext.isObject(subsystem)) {
		if(subsystem.main || subsystem.primary ||subsystem.secondary) {
			if(subsystem.main || subsystem.primary) {
				rslt = _findLangS(subsystem.main || subsystem.primary, typeItem, nameItem, strict);
			}
			if(!rslt && subsystem.secondary) {
				if(Ext.isArray(subsystem.secondary)) {
					for(var i = 0; !rslt && i < subsystem.secondary.length; i++) {
						rslt = _findLangS(subsystem.secondary[i], typeItem, nameItem, strict);
					}
				} else {
					rslt = _findLangS(subsystem.secondary, typeItem, nameItem, strict);
				}
			}
		} else {
			rslt = _findLangS(null, typeItem, nameItem, strict);
		}
	} else {
		rslt = _findLangS(subsystem, typeItem, nameItem, strict);
	}
	return(rslt)
}

function findLangSd(typeItem, nameItem) {
	return(findLangS(null, typeItem, nameItem));
}

function setLang(langData) {
	lang = cloneObject(langData && langData.global ? langData.global : langS_En.global);
	arLang = cloneObject(langData && langData.arrays ? langData.arrays : langS_En.arrays);
	langS = cloneObject(langData || langS_En);
}
